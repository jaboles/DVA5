<?xml version="1.0" ?>
<!-- Configuration of the Ant build system to generate a Jar file -->
<project name="DVA" default="CreateJar" xmlns:if="ant:if" xmlns:unless="ant:unless">
    <property environment="env"/>
    <exec executable="hostname" outputproperty="hostname" failonerror="true"/>
    <property name="ClassesDir" value="build/classes"/>
    <property name="OutDir" value="build${file.separator}Output"/>
    <property name="ToolsDir" value="build${file.separator}Tools"/>
    <path id="jars">
        <fileset dir="jars">
            <include name="*" />
        </fileset>
    </path>
    <property name="BuildClasspath" value="${toString:jars}" />
    <property name="JlinkModules" value="java.desktop,java.naming,jdk.unsupported,java.management"/>
    <condition property="ExecutableExtension" value=".exe" else="">
        <os family="windows"/>
    </condition>
    <condition property="bzip2compression" value="fast" else="best">
        <isset property="fast"/>
    </condition>
    <condition property="innosetupcompression" value="none" else="lzma2/ultra">
        <isset property="fast"/>
    </condition>
    <condition property="dpkgcompression" value="none" else="xz">
        <isset property="fast"/>
    </condition>

    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="${ToolsDir}/ant-contrib/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>

    <!-- Mac signing identity in Keychain -->
    <property name="SignIdentity" value="Developer ID Application: Jonathan Boles (W2WXX3D2U6)"/>

    <!-- Windows setup -->
    <property name="Wine"            value="wine"/>
    <property name="WinePrefix"      value="${user.home}/.wine"/>
    <property name="ResHackerDir"    value="${ToolsDir}${file.separator}resource_hacker"/>
    <property name="OutDirWine"      value="build\Output"/>
    <property name="WinRun4JDir"     value="${ToolsDir}${file.separator}winrun4j${file.separator}bin${file.separator}"/>
    <property name="WinOutDir32"     value="${OutDir}${file.separator}win${file.separator}i386${file.separator}"/>
    <property name="WinOutDir64"     value="${OutDir}${file.separator}win${file.separator}amd64${file.separator}"/>
    <condition property="InnoSetupCompiler" value="${WinePrefix}/drive_c/Program Files (x86)/Inno Setup 5/ISCC.exe"
               else="c:\Program Files (x86)\Inno Setup 5\ISCC.exe">
        <os family="mac"/>
    </condition>
    <property name="DmgName" value="DVA5"/>
    <property name="WindowsSetupName" value="DVA5Setup"/>

    <!-- OS/arch conditions -->
    <condition property="isMac">
        <os family="mac" />
    </condition>
    <condition property="isWindows">
        <os family="windows" />
    </condition>
    <condition property="isLinux">
        <os family="unix" />
    </condition>
    <exec if:set="isMac" executable="uname" outputproperty="machineArch">
        <arg value="-m"/>
    </exec>
    <condition property="isIntelMac">
        <and>
            <isset property="isMac"/>
            <equals arg1="${machineArch}" arg2="x86_64" />
        </and>
    </condition>

    <!-- Whether to build certain outputs based on OS/arch conditions -->
    <condition property="buildWindows">
        <or>
            <isset property="isWindows"/>
            <isset property="isIntelMac"/>
        </or>
    </condition>
    <condition property="buildLinux">
        <or>
            <isset property="isLinux"/>
            <isset property="isIntelMac"/>
        </or>
    </condition>

    <!-- Fetch build dependencies -->
    <target name="FetchDeps" depends="FetchDeps.Common,FetchDeps.Mac,FetchDeps.Mac.Intel,FetchDeps.Windows"/>
    <target name="FetchDeps.JlinkOptimizeJre">
        <echo>Calling jlink to optimize JRE into ${ToolsDir}/jre/${jrefolder}</echo>
        <delete dir="${ToolsDir}/jre/${jrefolder}"/>
        <exec executable="${env.JAVA_HOME}/bin/jlink">
            <arg value="--module-path"/>
            <arg value="${ToolsDir}/jdk/${jrefolder}/jmods"/>
            <arg value="--add-modules"/>
            <arg value="${JlinkModules}"/>
            <arg value="--no-header-files"/>
            <arg value="--no-man-pages"/>
            <arg value="--output"/>
            <arg value="${ToolsDir}/jre/${jrefolder}"/>
        </exec>
    </target>
    <target name="FetchDeps.Common">
        <mkdir dir="${ToolsDir}"/>
        <!-- Ant-Contrib -->
        <get src="https://sourceforge.net/projects/ant-contrib/files/ant-contrib/1.0b3/ant-contrib-1.0b3-bin.tar.gz/download" dest="${ToolsDir}/ant-contrib.tar.gz" usetimestamp="true"/>
        <untar src="${ToolsDir}/ant-contrib.tar.gz" dest="${ToolsDir}" compression="gzip" overwrite="false" />
    </target>
    <target name="FetchDeps.Mac" if="isMac" depends="FetchDeps.Common">
        <!-- JRE: Mac x64 -->
        <get src="https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.13%2B8/OpenJDK11U-jdk_x64_mac_hotspot_11.0.13_8.tar.gz" dest="${ToolsDir}" usetimestamp="true"/>
        <untar dest="${ToolsDir}\jdk\mac" compression="gzip" overwrite="false">
            <fileset dir="${ToolsDir}">
                <include name="OpenJDK*-jdk_x64_mac_*.tar.gz"/>
            </fileset>
            <cutdirsmapper dirs="1"/>
        </untar>
        <antcall target="FetchDeps.JlinkOptimizeJre">
            <param name="jrefolder" value="mac"/>
        </antcall>
        <!-- Protocol Buffers compiler -->
        <get src="https://github.com/protocolbuffers/protobuf/releases/download/v3.19.1/protoc-3.19.1-osx-x86_64.zip" dest="${ToolsDir}/protoc.zip" usetimestamp="true"/>
        <unzip src="${ToolsDir}/protoc.zip" dest="${ToolsDir}/protoc" overwrite="false"/>
        <chmod perm="u+x" file="${ToolsDir}/protoc/bin/protoc"/>
    </target>
    <target name="FetchDeps.BuildForWindows">
        <!-- Resource Hacker -->
        <get src="http://www.angusj.com/resourcehacker/resource_hacker.zip" dest="${ToolsDir}" usetimestamp="true"/>
        <unzip src="${ToolsDir}/resource_hacker.zip" dest="${ResHackerDir}" overwrite="false"/>
        <!-- WinRun4J -->
        <get src="https://sourceforge.net/projects/winrun4j/files/winrun4j/0.4.5/winrun4J-0.4.5.zip/download" dest="${ToolsDir}/winrun4j.zip" usetimestamp="true"/>
        <unzip src="${ToolsDir}/winrun4j.zip" dest="${ToolsDir}" overwrite="false"/>
        <!-- JRE: Win x64 -->
        <get src="https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.13%2B8/OpenJDK11U-jdk_x64_windows_hotspot_11.0.13_8.zip" dest="${ToolsDir}" usetimestamp="true"/>
        <unzip dest="${ToolsDir}\jdk\win64" overwrite="false">
            <fileset dir="${ToolsDir}">
                <include name="OpenJDK*-jdk_x64_windows_*.zip"/>
            </fileset>
            <cutdirsmapper dirs="1"/>
        </unzip>
        <antcall target="FetchDeps.JlinkOptimizeJre">
            <param name="jrefolder" value="win64"/>
        </antcall>
        <!-- JRE: Win x86 -->
        <get src="https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.13%2B8/OpenJDK11U-jdk_x86-32_windows_hotspot_11.0.13_8.zip" dest="${ToolsDir}" usetimestamp="true"/>
        <unzip dest="${ToolsDir}\jdk\win32" overwrite="false">
            <fileset dir="${ToolsDir}">
                <include name="OpenJDK*-jdk_x86-32_windows_*.zip"/>
            </fileset>
            <cutdirsmapper dirs="1"/>
        </unzip>
        <antcall target="FetchDeps.JlinkOptimizeJre">
            <param name="jrefolder" value="win32"/>
        </antcall>
        <!-- download Inno Setup -->
        <get src="https://files.jrsoftware.org/is/5/innosetup-5.6.1.exe" dest="${ToolsDir}/is.exe" usetimestamp="true"/>
    </target>
    <target name="FetchDeps.Mac.Intel" if="isIntelMac" depends="FetchDeps.BuildForWindows,FetchDeps.BuildForLinux">
        <!-- Wine -->
        <exec executable="which" outputproperty="testXquartz">
            <arg value="xquartz"/>
        </exec>
        <exec executable="brew" if:blank="testXquartz" failonerror="true">
            <arg line="install xquartz"/>
        </exec>
        <exec executable="which" outputproperty="testWine">
            <arg value="wine"/>
        </exec>
        <exec executable="brew" if:blank="testWine" failonerror="true">
            <arg line="tap homebrew/cask-versions"/>
        </exec>
        <exec executable="brew" if:blank="testWine" failonerror="true">
            <arg line="install --cask --no-quarantine wine-stable"/>
        </exec>
        <!-- install Inno Setup -->
        <condition property="innoSetupCompilerAvailable" value="1">
            <available file="${InnoSetupCompiler}"/>
        </condition>
        <exec executable="${Wine}" unless:set="innoSetupCompilerAvailable" failonerror="true">
            <env key="WINEPREFIX" value="${WinePrefix}"/>
            <arg line="${ToolsDir}/is.exe /silent"/>
        </exec>
        <!-- Dpkg -->
        <exec executable="which" outputproperty="testDpkg">
            <arg value="dpkg"/>
        </exec>
        <exec executable="brew" if:blank="testDpkg" failonerror="true">
            <arg line="install dpkg"/>
        </exec>
        <!-- Fakeroot -->
        <exec executable="which" outputproperty="testFakeroot">
            <arg value="fakeroot"/>
        </exec>
        <exec executable="brew" if:blank="testFakeroot" failonerror="true">
            <arg line="install fakeroot"/>
        </exec>
    </target>
    <target name="FetchDeps.Windows" if="isWindows" depends="FetchDeps.Common,FetchDeps.BuildForWindows">
        <!-- install Inno Setup -->
        <condition property="innoSetupCompilerAvailable" value="1">
            <available file="${InnoSetupCompiler}"/>
        </condition>
        <exec executable="${ToolsDir}/is.exe" unless:set="innoSetupCompilerAvailable" failonerror="true">
            <arg line="/silent"/>
        </exec>
        <!-- Protocol Buffers compiler -->
        <get src="https://github.com/protocolbuffers/protobuf/releases/download/v3.19.1/protoc-3.19.1-win64.zip" dest="${ToolsDir}/protoc.zip" usetimestamp="true"/>
        <unzip src="${ToolsDir}/protoc.zip" dest="${ToolsDir}/protoc" overwrite="false"/>
    </target>
    <target name="FetchDeps.BuildForLinux" depends="FetchDeps.Common">
        <!-- JRE: Linux x64 -->
        <get src="https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.13%2B8/OpenJDK11U-jdk_x64_linux_hotspot_11.0.13_8.tar.gz" dest="${ToolsDir}" usetimestamp="true"/>
        <untar dest="${ToolsDir}\jdk\linux-x86_64" compression="gzip" overwrite="false">
            <fileset dir="${ToolsDir}">
                <include name="OpenJDK*-jdk_x64_linux_*.tar.gz"/>
            </fileset>
            <cutdirsmapper dirs="1"/>
        </untar>
        <antcall target="FetchDeps.JlinkOptimizeJre">
            <param name="jrefolder" value="linux-x86_64"/>
        </antcall>
        <!-- JRE: Linux aarch64 -->
        <get src="https://github.com/adoptium/temurin11-binaries/releases/download/jdk-11.0.13%2B8/OpenJDK11U-jdk_aarch64_linux_hotspot_11.0.13_8.tar.gz" dest="${ToolsDir}" usetimestamp="true"/>
        <untar dest="${ToolsDir}\jdk\linux-aarch64" compression="gzip" overwrite="false">
            <fileset dir="${ToolsDir}">
                <include name="OpenJDK*-jdk_aarch64_linux_*.tar.gz"/>
            </fileset>
            <cutdirsmapper dirs="1"/>
        </untar>
        <antcall target="FetchDeps.JlinkOptimizeJre">
            <param name="jrefolder" value="linux-aarch64"/>
        </antcall>
    </target>
    <target name="FetchDeps.Linux" if="isLinux" depends="FetchDeps.Common,FetchDeps.BuildForLinux">
        <!-- Protocol Buffers compiler -->
        <get src="https://github.com/protocolbuffers/protobuf/releases/download/v3.19.1/protoc-3.19.1-linux-x86_64.zip" dest="${ToolsDir}/protoc.zip" usetimestamp="true"/>
        <unzip src="${ToolsDir}/protoc.zip" dest="${ToolsDir}/protoc" overwrite="false"/>
        <chmod perm="u+x" file="${ToolsDir}/protoc/bin/protoc"/>
    </target>

    <!-- Increments the build number -->
    <target name="IncrementBuildNumber" description="Increment build number">
        <buildnumber file="DVAApp/resources/buildnumber.txt"/>
    </target>

    <target name="Clean" description="Clean output folder">
        <delete failonerror="false" dir="${OutDir}"/>
        <delete failonerror="false" dir="${ClassesDir}"/>
    </target>

    <target name="Compile" description="Compile java code">
        <mkdir dir="${ClassesDir}"/>
        <exec executable="${ToolsDir}/protoc/bin/protoc${ExecutableExtension}" failonerror="true">
            <arg value="--java_out=PlasmaCommon/src" />
            <arg value="PlasmaCommon${file.separator}src${file.separator}jb${file.separator}plasma${file.separator}gtfs${file.separator}gtfs-realtime_1007_extension.proto" />
        </exec>
        <javac destdir="${ClassesDir}" classpath="${BuildClasspath}" excludes="jb/common/nativefilechooser/*" debug="on" verbose="off" includeantruntime="no">
            <src path="DVAApp/src"/>
            <src path="DVACommon/src"/>
            <src path="PlasmaCommon/src"/>
            <src path="Core/src"/>
            <compilerarg value="-Xlint:unchecked"/>
            <compilerarg value="-Xlint:deprecation"/>
        </javac>
    </target>

    <!-- After Eclipse compile task, prepare JAR file -->
    <target name="CreateJar" description="Create Jar file" depends="Compile,IncrementBuildNumber">
        <manifestclasspath property="ManifestClasspath" jarfile="jars/dummy.jar">
            <classpath refid="jars" />
        </manifestclasspath>
        <jar jarfile="${OutDir}/DVA.jar" level="0">
            <manifest>
                <attribute name="Main-Class" value="jb.dvacommon.DVA"/>
                <attribute name="Class-Path" value="${ManifestClasspath}"/>
            </manifest>
            <fileset dir="${ClassesDir}">
                <include name="**"/>
            </fileset>
            <fileset dir="DVAApp/src">
                <patternset>
                    <include name="**/*.xml"/>
                    <include name="**/*.properties"/>
                    <include name="**/*.png"/>
                    <include name="**/*.svg"/>
                </patternset>
            </fileset>
            <fileset dir="Core/src">
                <patternset>
                    <include name="**/*.xml"/>
                    <include name="**/*.properties"/>
                </patternset>
            </fileset>
            <fileset dir="DVAApp/resources">
                <include name="**"/>
            </fileset>
        </jar>
        <copy todir="${OutDir}" preservelastmodified="true">
            <fileset dir="configs" includes="*" />
        </copy>
    </target>

    <!-- Builds the Mac app bundle. Windows uses a stub .exe launcher so no need to update it. -->
    <target name="BuildMacApp" description="Update contents of the mac app" if="isMac" depends="CreateJar,SetupCommon">
        <property name="AppBundleContents" value="${OutDir}/DVA.app/Contents/MacOS"/>
        <copy todir="${OutDir}">
            <fileset dir="mac">
                <include name="DVA.app/**"/>
            </fileset>
        </copy>
        <exec executable="plutil" dir="${OutDir}" failonerror="true">
            <arg line="-replace CFBundleGetInfoString -string ${DVAVersion} DVA.app/Contents/Info.plist"/>
        </exec>
        <exec executable="plutil" dir="${OutDir}" failonerror="true">
            <arg line="-replace CFBundleShortVersionString -string ${DVAVersion} DVA.app/Contents/Info.plist"/>
        </exec>
        <exec executable="plutil" dir="${OutDir}" failonerror="true">
            <arg line="-replace CFBundleVersion -string ${DVAVersion} DVA.app/Contents/Info.plist"/>
        </exec>
        <exec executable="plutil" dir="${OutDir}" failonerror="true">
            <arg line="-replace NSHumanReadableCopyright -string &quot;Copyright © Jonathan Boles 1999-2022&quot; DVA.app/Contents/Info.plist"/>
        </exec>
        <copy todir="${AppBundleContents}" preservelastmodified="true">
            <fileset dir=".">
                <include name="log4j2.xml"/>
            </fileset>
            <fileset dir="${OutDir}">
                <include name="*.txt"/>
                <include name="DVA.jar"/>
            </fileset>
            <fileset dir="jars">
                <include name="*.jar"/>
            </fileset>
            <fileset dir="ffmpeg/mac">
                <include name="*"/>
            </fileset>
        </copy>
        <delete failonerror="false" dir="${AppBundleContents}/jre"/>
        <copy todir="${AppBundleContents}/jre" preservelastmodified="true">
            <fileset dir="${ToolsDir}/jre/mac">
                <include name="**"/>
            </fileset>
        </copy>
        <chmod perm="u+x" file="${AppBundleContents}/dva"/>
        <chmod perm="u+x" file="${AppBundleContents}/ffmpeg"/>
        <chmod perm="u+x" file="${AppBundleContents}/jre/bin/java"/>
        <chmod perm="u+x" file="${AppBundleContents}/jre/lib/jspawnhelper"/>
        <move file="${OutDir}/DVA.app/Contents/MacOS/jre/legal" tofile="${OutDir}/DVA.app/Contents/Resources/legal"/>
    </target>

    <target name="SignMac.Check">
        <echo level="info">Running on ${hostname}</echo>
        <condition property="WillSignMac">
            <or>
                <equals arg1="${hostname}" arg2="jb"/>
                <equals arg1="${hostname}" arg2="jb.local"/>
                <equals arg1="${hostname}" arg2="jb.wavecable.com"/>
                <equals arg1="${env.SYSTEM_COLLECTIONURI}" arg2="https://jonathanboles.visualstudio.com/"/>
            </or>
        </condition>
    </target>
    <target name="SignMacApp" description="Mac App Signing" depends="SignMac.Check,BuildMacApp" if="WillSignMac">
        <exec executable="codesign" dir="${OutDir}" failonerror="true">
            <arg line="-v --force --deep --options runtime --timestamp --entitlements ../../mac/entitlements.plist --sign '${SignIdentity}' DVA.app"/>
        </exec>
        <!-- verify codesign -->
        <exec executable="codesign" dir="${OutDir}" failonerror="true">
            <arg line="-v --deep --verify DVA.app"/>
        </exec>
    </target>

    <target name="ResHack">
        <!-- Params:
            file: the path of the Windows binary to ResHack.
            icon: the new icon to embed in the binary.
            ini: the WinRun4J .ini to embed in the binary. -->
        <echo level="info">Processing with ResourceHacker: ${file}</echo>
        <echo file="temp.rh">[FILENAMES]
Open=   ${file}
SaveAs= ${file}
Log=    console
[COMMANDS]
-delete ICONGROUP,,
-addoverwrite ${icon}, ICONGROUP,1,0
-addoverwrite ${ini}, 687,1,0
-addoverwrite ${stringtable}, STRINGTABLE,1,0
</echo>
        <exec executable="${Wine}" osfamily="mac" failonerror="true">
            <env key="WINEPREFIX" value="${WinePrefix}"/>
            <arg line="${ResHackerDir}/ResourceHacker.exe -script temp.rh -log console"/>
        </exec>
        <exec executable="${ResHackerDir}\ResourceHacker.exe" osfamily="windows" failonerror="true">
            <arg line="-script temp.rh -log console"/>
        </exec>
        <delete file="temp.rh"/>
    </target>
    <target name="BuildWinExes">
        <property name="WinOutDir32Wine" value="${OutDirWine}\win\i386\"/>
        <property name="WinOutDir64Wine" value="${OutDirWine}\win\amd64\"/>
        <copy tofile="${WinOutDir32}DVA.exe" file="${WinRun4JDir}WinRun4J.exe" overwrite="true"/>
        <copy tofile="${WinOutDir64}DVA.exe" file="${WinRun4JDir}WinRun4J64.exe" overwrite="true"/>
        <copy tofile="${WinOutDir32}DVA.scr" file="${WinRun4JDir}WinRun4J.exe" overwrite="true"/>
        <copy tofile="${WinOutDir64}DVA.scr" file="${WinRun4JDir}WinRun4J64.exe" overwrite="true"/>

        <antcall target="ResHack">
            <param name="file" value="${WinOutDir32Wine}DVA.exe" />
            <param name="icon" value="win\dva.ico" />
            <param name="ini" value="win\DVA.ini" />
            <param name="stringtable" value="win\ScreenSaverStringTable.res"/>
        </antcall>
        <antcall target="ResHack">
            <param name="file" value="${WinOutDir64Wine}DVA.exe" />
            <param name="icon" value="win\dva.ico" />
            <param name="ini" value="win\DVA.ini" />
            <param name="stringtable" value="win\ScreenSaverStringTable.res"/>
        </antcall>
        <antcall target="ResHack">
            <param name="file" value="${WinOutDir32Wine}DVA.scr" />
            <param name="icon" value="win\pse.ico" />
            <param name="ini" value="win\DVA.ini" />
            <param name="stringtable" value="win\ScreenSaverStringTable.res"/>
        </antcall>
        <antcall target="ResHack">
            <param name="file" value="${WinOutDir64Wine}DVA.scr" />
            <param name="icon" value="win\pse.ico" />
            <param name="ini" value="win\DVA.ini" />
            <param name="stringtable" value="win\ScreenSaverStringTable.res"/>
        </antcall>
        <antcall target="SignWinFile">
            <param name="file" value="${WinOutDir32}DVA.exe"/>
        </antcall>
        <antcall target="SignWinFile">
            <param name="file" value="${WinOutDir64}DVA.exe"/>
        </antcall>
        <antcall target="SignWinFile">
            <param name="file" value="${WinOutDir32}DVA.scr"/>
        </antcall>
        <antcall target="SignWinFile">
            <param name="file" value="${WinOutDir64}DVA.scr"/>
        </antcall>
    </target>

    <target name="SetupCommon" description="common setup crap">
        <copy file="DVAApp/resources/new.html" todir="${OutDir}"/>
        <exec executable="sh" outputproperty="DVAVersion" osfamily="mac" failonerror="true">
            <arg value="-c"/>
            <arg value="cat DVAApp/src/jb/dvacommon/DVA.java | grep '&quot;\d\+\.\d\+\.\d\+&quot;' | sed 's/.*&quot;\(.*\)&quot;[^&quot;]*$/\1/'"/>
        </exec>
        <exec executable="sh" outputproperty="DVAVersion" osfamily="unix" failonerror="true">
            <arg value="-c"/>
            <arg value="cat DVAApp/src/jb/dvacommon/DVA.java | grep -P '&quot;\d+\.\d+\.\d+&quot;' | sed 's/.*&quot;\(.*\)&quot;[^&quot;]*$/\1/'"/>
        </exec>
        <exec executable="powershell.exe" outputproperty="DVAVersion" osfamily="windows" failonerror="true">
            <arg value="-command"/>
            <arg value="(gc DVAApp/src/jb/dvacommon/DVA.java -raw) -match '&quot;(\d\.\d\.\d)&quot;' | out-null; $matches[1]"/>
        </exec>
        <echo level="info">Read version string: ${DVAVersion}</echo>
        <echo file="${OutDir}/version.txt">${DVAVersion}</echo>
    </target>

    <!-- Build Mac setup -->
    <target name="BuildMacDmg" description  ="Build Mac DMG" if="isMac" depends="SignMacApp">
        <property name="DmgVolumeName" value="DVA 5"/>
        <property name="DmgMountPoint" value="/Volumes/${DmgVolumeName}"/>
        <delete file="${OutDir}/${DmgName}.ro.dmg" failonerror="false"/>
        <delete file="${OutDir}/${DmgName}.dmg" failonerror="false"/>
        <delete file="${OutDir}/${DmgName}.dmg.bz2" failonerror="false"/>
        <exec executable="sh" outputproperty="dmgSizeMb">
            <arg line="-c &quot;echo $((`du -d 0 -m build/Output/DVA.app | cut -f 1` + 5))&quot;"/>
        </exec>
        <echo>Creating .DMG with ${dmgSizeMb} mb</echo>
        <exec executable="hdiutil" dir="${OutDir}" failonerror="true">
            <arg line="create -megabytes ${dmgSizeMb} -volname &quot;${DmgVolumeName}&quot; -fs HFS+ ${DmgName}.dmg"/>
        </exec>
        <exec executable="hdiutil" dir="${OutDir}" failonerror="true">
            <arg line="attach ${DmgName}.dmg"/>
        </exec>
        <exec executable="sh" dir="${OutDir}" failonerror="true">
            <arg value="-c"/>
            <arg value="cp -Rfp DVA.app '${DmgMountPoint}'"/>
        </exec>
        <exec executable="osascript" failonerror="true">
            <arg line="-e 'tell application &quot;Finder&quot; to make alias file to posix file &quot;/Applications&quot; at posix file &quot;${DmgMountPoint}&quot;'"/>
        </exec>
        <sleep seconds="1"/>
        <exec executable="hdiutil" failonerror="true">
            <arg line="detach '${DmgMountPoint}'"/>
        </exec>
        <echo level="info">Bzip2 compression: ${bzip2compression}</echo>
        <exec executable="bzip2" dir="${OutDir}" failonerror="true">
            <arg line="--verbose --${bzip2compression} --keep ${DmgName}.dmg"/>
        </exec>
        <exec executable="hdiutil" dir="${OutDir}" failonerror="true">
            <arg line="convert ${DmgName}.dmg -format UDBZ -o ${DmgName}.ro.dmg"/>
        </exec>
        <move file="${OutDir}/${DmgName}.ro.dmg" tofile="${OutDir}/${DmgName}.dmg"/>
    </target>
    <target name="SignMacDmg" description="Mac DMG Signing" depends="SignMac.Check,BuildMacDmg" if="WillSignMac">
        <exec executable="codesign" dir="${OutDir}" failonerror="true">
            <arg line="-v --force --timestamp --sign '${SignIdentity}' ${DmgName}.dmg"/>
        </exec>
        <!-- verify codesign -->
        <exec executable="codesign" dir="${OutDir}" failonerror="true">
            <arg line="-v --verify ${DmgName}.dmg"/>
        </exec>
        <!-- Notarize -->
        <exec executable="sh" dir="${OutDir}" failonerror="true">
            <arg line="../../notarize.sh ${DmgName}.dmg"/>
        </exec>
        <!-- verify gatekeeper -->
        <exec executable="spctl" dir="${OutDir}" failonerror="true">
            <arg line="-vv --assess --type open --context context:primary-signature ${DmgName}.dmg"/>
        </exec>
    </target>

    <!-- Build windows setup -->
    <target name="BuildWinSetup" description="Build Windows setup EXE" depends="CreateJar,SetupCommon,BuildWinExes" if="buildWindows">
        <echo level="info">Inno Setup compression: ${innosetupcompression}</echo>
        <property name="innosetupargs" value="/Qp /Dinnosetupcompression=${innosetupcompression} /Dversion=${DVAVersion} win\setup.iss"/>
        <exec executable="${Wine}" osfamily="mac" failonerror="true">
            <env key="WINEPREFIX" value="${WinePrefix}"/>
            <arg value="${InnoSetupCompiler}"/>
            <arg line="${innosetupargs}"/>
        </exec>
        <exec executable="${InnoSetupCompiler}" osfamily="windows" failonerror="true">
            <arg line="${innosetupargs}"/>
        </exec>
    </target>

    <!-- Sign windows setup -->
    <target name="SignWin.Check">
        <condition property="WillSignWin">
            <or>
                <available file="/Users/jb/Software/JonathanBoles.pvk"/>
                <equals arg1="${env.SYSTEM_COLLECTIONURI}" arg2="https://jonathanboles.visualstudio.com/"/>
            </or>
        </condition>
        <available file="/Users/jb/Software/JonathanBoles.pvk" property="SignKey" value="/Users/jb/Software/JonathanBoles.pvk"/>
        <available file="/Users/jb/Software/JonathanBoles.spc" property="SignCert" value="/Users/jb/Software/JonathanBoles.spc"/>
        <available file="${env.AGENT_TEMPDIRECTORY}/JonathanBoles.pfx" property="SignCert" value="${env.AGENT_TEMPDIRECTORY}\JonathanBoles.pfx"/>
        <echo level="info">Signing cert: ${SignCert}</echo>
    </target>
    <target name="SignWinFile" depends="SignWin.Check" if="WillSignWin">
        <echo message="Signing: ${file}"/>
        <exec executable="signcode" osfamily="mac" failonerror="true">
            <arg line="-a sha1 -t http://timestamp.digicert.com -spc ${SignCert} -pvk ${SignKey} -n &quot;DVA&quot; ${file}"/>
        </exec>
        <exec executable="C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x86\signtool.exe" osfamily="windows" failonerror="true">
            <arg line="sign /f ${SignCert} /fd SHA256 /tr http://timestamp.digicert.com /td SHA256 /d &quot;DVA&quot; ${file}"/>
        </exec>
    </target>
    <target name="SignWinSetup" depends="BuildWinSetup">
        <antcall target="SignWinFile">
            <param name="file" value="${OutDir}/DVA5Setup.exe" />
        </antcall>
    </target>

    <!-- Linux Debian Setups -->
    <target name="BuildLinuxDebs" if="buildLinux" depends="CreateJar,SetupCommon">
        <antcall target="BuildLinuxDeb">
            <param name="arch" value="x86_64"/>
            <param name="arch.debian" value="amd64"/>
        </antcall>
        <antcall target="BuildLinuxDeb">
            <param name="arch" value="aarch64"/>
            <param name="arch.debian" value="arm64"/>
        </antcall>
    </target>
    <target name="BuildLinuxDeb">
        <!-- Params:
             ${arch}        - the arch identifier as it would be in Java (x86_64, aarch64)
             ${arch.debian} - the corresponding Debian arch identifier (amd64, arm64)
        -->
        <echo>Building .DEB for arch: ${arch} (debian arch: ${arch.debian})</echo>
        <property name="DpkgRoot" value="${OutDir}/debian"/>
        <delete failonerror="false" dir="${DpkgRoot}"/>
        <copy todir="${DpkgRoot}/DEBIAN" preservelastmodified="true" file="linux/debian/control"/>
        <copy todir="${DpkgRoot}/usr/share/applications" preservelastmodified="true" file="linux/debian/dva.desktop"/>
        <copy todir="${DpkgRoot}/usr/bin" preservelastmodified="true" file="linux/dva"/>
        <copy todir="${DpkgRoot}/usr/share/dva" preservelastmodified="true" file="DVAApp/resources/dva_icon.png"/>
        <copy todir="${DpkgRoot}/usr/share/dva" preservelastmodified="true">
            <fileset dir="${OutDir}">
                <include name="*.txt"/>
                <include name="DVA.jar"/>
            </fileset>
            <fileset dir="jars">
                <include name="*.jar"/>
            </fileset>
            <fileset dir="ffmpeg/linux-${arch}">
                <include name="**"/>
            </fileset>
        </copy>
        <copy todir="${DpkgRoot}/usr/share/dva/jre" preservelastmodified="true">
            <fileset dir="${ToolsDir}/jre/linux-${arch}">
                <include name="**"/>
            </fileset>
        </copy>
        <chmod perm="+x" file="${DpkgRoot}/usr/bin/dva"/>
        <chmod perm="+x" file="${DpkgRoot}/usr/share/dva/ffmpeg"/>
        <chmod perm="+x" file="${DpkgRoot}/usr/share/dva/jre/bin/java"/>
        <chmod perm="+x" file="${DpkgRoot}/usr/share/dva/jre/lib/jspawnhelper"/>
        <exec executable="sh" outputproperty="debInstalledSize">
            <arg line="-c &quot;echo `du -d 0 -k build/Output/debian | cut -f 1`&quot;"/>
        </exec>
        <exec executable="sed" dir="${basedir}" osfamily="mac" failonerror="true">
            <arg value="-i"/>
            <arg value=".bak"/>
            <arg value="s/^Version:.*/Version: ${DVAVersion}/;s/^Installed\-Size:.*/Installed\-Size: ${debInstalledSize}/;s/^Architecture:.*/Architecture: ${arch.debian}/"/>
            <arg value="${DpkgRoot}/DEBIAN/control"/>
        </exec>
        <exec executable="sed" dir="${basedir}" osfamily="unix" failonerror="true">
            <arg value="-i.bak"/>
            <arg value="s/^Version:.*/Version: ${DVAVersion}/;s/^Installed\-Size:.*/Installed\-Size: ${debInstalledSize}/;s/^Architecture:.*/Architecture: ${arch.debian}/"/>
            <arg value="${DpkgRoot}/DEBIAN/control"/>
        </exec>
        <delete file="${DpkgRoot}/DEBIAN/control.bak"/>
        <exec executable="fakeroot" dir="${OutDir}" osfamily="mac" failonerror="true">
            <arg value="dpkg-deb"/>
            <arg value="-Z${dpkgcompression}"/>
            <arg value="--build"/>
            <arg value="debian"/>
        </exec>
        <exec executable="dpkg-deb" dir="${OutDir}" osfamily="unix" failonerror="true">
            <arg value="-Z${dpkgcompression}"/>
            <arg value="--build"/>
            <arg value="debian"/>
        </exec>
        <move file="${OutDir}/debian.deb" tofile="${OutDir}/DVA5-${arch}.deb"/>
    </target>

    <target name="AllSetups" description="Build all setups" depends="Clean,SignMacDmg,SignWinSetup,BuildLinuxDebs">
        <java jar="${AppBundleContents}/DVA.jar" fork="true">
            <arg value="/clearsettings"/>
        </java>
        <echo level="info">Version ${DVAVersion}</echo>
        <copy todir="build/TestUpdateDrop/${DVAVersion}">
            <fileset dir="${OutDir}">
                <include name="${DmgName}.dmg"/>
                <include name="${DmgName}.dmg.bz2"/>
                <include name="${WindowsSetupName}.exe"/>
                <include name="DVA5*.deb"/>
                <include name="new.html"/>
            </fileset>
        </copy>
    </target>

    <target name="Run" description="Fast dev build" depends="BuildMacApp">
        <exec executable="build/Output/DVA.app/Contents/MacOS/dva"/>
    </target>

    <target name="SoundJars">
        <foreach target="SoundJar" param="dir">
            <path>
                <dirset dir="sounds" includes="*"/>
            </path>
        </foreach>
    </target>
    <target name="SoundJar">
        <basename property="name" file="${dir}"/>
        <zip basedir="${dir}"
             destfile="build/soundjars/${name}.jar"
             compress="false">
        </zip>
    </target>
</project>
<?xml version="1.0" ?>
<!-- Configuration of the Ant build system to generate a Jar file -->
<project name="DVA" default="CreateJar">
    <property environment="env"/>
    <exec executable="hostname" outputproperty="hostname" failonerror="true"/>
    <property name="ClassesDir" value="build${file.separator}classes"/>
    <property name="OutDir" value="build${file.separator}Output"/>
    <property name="ToolsDir" value="build${file.separator}Tools"/>
    <property name="AppBundleContents" value="${OutDir}/DVA.app/Contents/MacOS"/>
    <path id="jars">
        <fileset dir="jars">
            <include name="*" />
        </fileset>
    </path>
    <property name="BuildClasspath" value="${toString:jars}" />
    <condition property="bzip2compression" value="fast" else="best">
        <isset property="fast"/>
    </condition>
    <condition property="innosetupcompression" value="none" else="lzma2/ultra">
        <isset property="fast"/>
    </condition>

    <taskdef resource="net/sf/antcontrib/antcontrib.properties"/>

    <!-- Mac signing identity in Keychain -->
    <property name="SignIdentity" value="Jonathan Boles"/>
    <!-- Windows signing cert paths. -->
    <property name="SignKey" value="/Users/jb/Software/jb.pvk"/>
    <property name="SignCert" value="/Users/jb/Software/jb.spc"/>

	<!-- Mac setup -->
    <property name="DmgName" value="DVA5"/>
    <property name="DmgVolumeName" value="DVA 5"/>
    <property name="DmgMountPoint" value="/Volumes/${DmgVolumeName}"/>
    <property name="DmgSizeMb" value="185"/>
	
	<!-- Windows setup -->
    <property name="Wine"            value="wine"/>
    <property name="WinePrefix"      value="${user.home}/.wine"/>
    <property name="ResHackerDir"    value="${ToolsDir}${file.separator}resource_hacker"/>
    <property name="OutDirWine"      value="build\Output"/>
    <property name="WinRun4JDir"     value="${ToolsDir}${file.separator}winrun4j${file.separator}bin${file.separator}"/>
    <property name="WinOutDir32"     value="${OutDir}${file.separator}win${file.separator}i386${file.separator}"/>
    <property name="WinOutDir32Wine" value="${OutDirWine}\win\i386\"/>
    <property name="WinOutDir64"     value="${OutDir}${file.separator}win${file.separator}amd64${file.separator}"/>
    <property name="WinOutDir64Wine" value="${OutDirWine}\win\amd64\"/>
    <condition property="InnoSetupCompiler" value="${WinePrefix}/drive_c/Program Files (x86)/Inno Setup 5/ISCC.exe"
                                             else="c:\Program Files (x86)\Inno Setup 5\ISCC.exe">
        <os family="mac"/>
    </condition>
	<property name="WindowsSetupName" value="DVA5Setup"/>

    <!-- linux DEB -->
    <property name="DpkgRoot" value="${OutDir}${file.separator}debian"/>

    <condition property="isMac">
        <os family="mac" />
    </condition>
    <condition property="isWindows">
        <os family="windows" />
    </condition>

    <!-- Fetch build dependencies -->
    <target name="FetchDeps" depends="FetchDeps.Common,FetchDeps.Mac,FetchDeps.Windows">

    </target>
    <target name="FetchDeps.Common">
        <mkdir dir="${ToolsDir}"/>
        <!-- Resource Hacker -->
        <get src="http://www.angusj.com/resourcehacker/resource_hacker.zip" dest="${ToolsDir}" verbose="true" skipexisting="true"/>
        <unzip src="${ToolsDir}${file.separator}resource_hacker.zip" dest="${ResHackerDir}" overwrite="false"/>
        <!-- WinRun4J -->
        <get src="https://sourceforge.net/projects/winrun4j/files/winrun4j/0.4.5/winrun4J-0.4.5.zip/download" dest="${ToolsDir}${file.separator}winrun4j.zip" verbose="true" skipexisting="true"/>
        <unzip src="${ToolsDir}${file.separator}winrun4j.zip" dest="${ToolsDir}" overwrite="false"/>
        <!-- JRE: Win x64 -->
        <get src="https://github.com/AdoptOpenJDK/openjdk15-binaries/releases/download/jdk-15.0.2%2B7/OpenJDK15U-jre_x64_windows_hotspot_15.0.2_7.zip" dest="${ToolsDir}" verbose="true" skipexisting="true"/>
        <unzip dest="${ToolsDir}\jre\win32" overwrite="false">
            <fileset dir="${ToolsDir}">
                <include name="OpenJDK*-jre_x86-32_windows_*.zip"/>
            </fileset>
            <cutdirsmapper dirs="1"/>
        </unzip>
        <!-- JRE: Win x86 -->
        <get src="https://github.com/AdoptOpenJDK/openjdk15-binaries/releases/download/jdk-15.0.2%2B7/OpenJDK15U-jre_x86-32_windows_hotspot_15.0.2_7.zip" dest="${ToolsDir}" verbose="true" skipexisting="true"/>
        <unzip dest="${ToolsDir}\jre\win64" overwrite="false">
            <fileset dir="${ToolsDir}">
                <include name="OpenJDK*-jre_x64_windows_*.zip"/>
            </fileset>
            <cutdirsmapper dirs="1"/>
        </unzip>
    </target>
    <target name="FetchDeps.Mac" if="isMac">
        <!-- Wine -->
        <exec executable="brew" failonerror="true">
            <arg line="install xquartz"/>
        </exec>
        <exec executable="brew" failonerror="true">
            <arg line="tap homebrew/cask-versions"/>
        </exec>
        <exec executable="brew" failonerror="true">
            <arg line="install --cask --no-quarantine wine-stable"/>
        </exec>
        <!-- Inno Setup -->
        <get src="https://files.jrsoftware.org/is/5/innosetup-5.6.1.exe" dest="${ToolsDir}${file.separator}is.exe" verbose="true" skipexisting="true"/>
        <exec executable="${Wine}" failonerror="true">
            <env key="WINEPREFIX" value="${WinePrefix}"/>
            <arg line="${ToolsDir}${file.separator}is.exe /silent"/>
        </exec>
        <!-- Dpkg -->
        <exec executable="brew" failonerror="true">
            <arg line="install dpkg"/>
        </exec>
        <!-- Fakeroot -->
        <exec executable="brew" failonerror="true">
            <arg line="install fakeroot"/>
        </exec>
        <!-- Mac x64 -->
        <get src="https://github.com/AdoptOpenJDK/openjdk15-binaries/releases/download/jdk-15.0.2%2B7/OpenJDK15U-jre_x64_mac_hotspot_15.0.2_7.tar.gz" dest="${ToolsDir}" verbose="true" skipexisting="true"/>
        <untar dest="${ToolsDir}\jre\mac" compression="gzip" overwrite="false">
            <fileset dir="${ToolsDir}">
                <include name="OpenJDK*-jre_x64_mac_*.tar.gz"/>
            </fileset>
            <cutdirsmapper dirs="1"/>
        </untar>
    </target>
    <target name="FetchDeps.Windows" if="isWindows">
        <!-- Inno Setup -->
        <get src="https://files.jrsoftware.org/is/5/innosetup-5.6.1.exe" dest="${ToolsDir}${file.separator}is.exe" verbose="true" skipexisting="true"/>
        <exec executable="${ToolsDir}${file.separator}is.exe" failonerror="true">
            <arg line="/silent"/>
        </exec>
    </target>

    <!-- Increments the build number -->
    <target name="IncrementBuildNumber" description="Increment build number">
        <buildnumber file="resources${file.separator}buildnumber.txt"/>
    </target>

    <target name="Clean" description="Clean output folder">
        <delete failonerror="false" dir="${OutDir}"/>
    </target>
	
	<target name="Compile" description="Compile java code">
        <mkdir dir="${ClassesDir}"/>
        <exec executable="protoc" failonerror="true">
            <arg value="--java_out=src" />
            <arg value="src${file.separator}jb${file.separator}plasma${file.separator}gtfs${file.separator}gtfs-realtime_1007_extension.proto" />
        </exec>
		<javac srcdir="src" destdir="${ClassesDir}" classpath="${BuildClasspath}" excludes="jb/common/nativefilechooser/*" debug="on" verbose="off" includeantruntime="no">
            <compilerarg value="-Xlint:unchecked"/>
            <compilerarg value="-Xlint:deprecation"/>
        </javac>
	</target>

    <!-- After Eclipse compile task, prepare JAR file -->
    <target name="CreateJar" description="Create Jar file" depends="Compile,IncrementBuildNumber">
        <manifestclasspath property="ManifestClasspath" jarfile="jars/dummy.jar">
            <classpath refid="jars" />
        </manifestclasspath>
        <jar jarfile="${OutDir}/DVA.jar" level="0">
            <manifest>
                <attribute name="Main-Class" value="jb.dvacommon.DVA"/>
                <attribute name="Class-Path" value="${ManifestClasspath}"/>
            </manifest>
            <fileset dir="${ClassesDir}">
                <include name="**"/>
            </fileset>
            <fileset dir="src">
                <patternset>
                    <include name="**/*.xml"/>
                    <include name="**/*.properties"/>
                    <include name="**/*.png"/>
                </patternset>
            </fileset>
            <fileset dir="resources">
                <include name="*"/>
            </fileset>
    	</jar>
        <copy todir="${OutDir}" preservelastmodified="true">
            <fileset dir="configs" includes="*" />
        </copy>
    </target>

    <!-- Builds the Mac app bundle. Windows uses a stub .exe launcher so no need to update it. -->
    <target name="BuildMacApp" description="Update contents of the mac app" if="isMac" depends="CreateJar,SetupCommon">
        <copy todir="${OutDir}">
            <fileset dir="mac">
                <include name="DVA.app/**"/>
            </fileset>
        </copy>
        <exec executable="plutil" dir="${OutDir}" failonerror="true">
            <arg value="-replace"/>
            <arg value="CFBundleGetInfoString"/>
            <arg value="-string"/>
            <arg value="${DVAVersion}"/>
            <arg value="DVA.app/Contents/Info.plist"/>
        </exec>
        <exec executable="plutil" dir="${OutDir}" failonerror="true">
            <arg value="-replace"/>
            <arg value="CFBundleShortVersionString"/>
            <arg value="-string"/>
            <arg value="${DVAVersion}"/>
            <arg value="DVA.app/Contents/Info.plist"/>
        </exec>
        <exec executable="plutil" dir="${OutDir}" failonerror="true">
            <arg value="-replace"/>
            <arg value="CFBundleVersion"/>
            <arg value="-string"/>
            <arg value="${DVAVersion}"/>
            <arg value="DVA.app/Contents/Info.plist"/>
        </exec>
        <exec executable="plutil" dir="${OutDir}" failonerror="true">
            <arg value="-replace"/>
            <arg value="NSHumanReadableCopyright"/>
            <arg value="-string"/>
            <arg value="Copyright © Jonathan Boles 1999-2021"/>
            <arg value="DVA.app/Contents/Info.plist"/>
        </exec>
        <copy todir="${AppBundleContents}" preservelastmodified="true">
        	<fileset dir=".">
                <include name="log4j2.xml"/>
            </fileset>
        	<fileset dir="${OutDir}">
        		<include name="*.txt"/>
        		<include name="DVA.jar"/>
        	</fileset>
            <fileset dir="jars">
            	<include name="*.jar"/>
            </fileset>
            <fileset dir="ffmpeg/mac">
                <include name="*"/>
            </fileset>
        </copy>
        <copy todir="${AppBundleContents}\jre" preservelastmodified="true">
            <fileset dir="${ToolsDir}\jre\mac">
                <include name="**"/>
            </fileset>
        </copy>
        <chmod perm="u+x" file="${AppBundleContents}/dva"/>
        <chmod perm="u+x" file="${AppBundleContents}/jre/Contents/Home/bin/java"/>
        <chmod perm="u+x" file="${AppBundleContents}/jre/Contents/Home/lib/jspawnhelper"/>
    </target>

    <target name="SignMacApp.Check">
    	<echo level="info">Running on ${hostname}</echo>
        <condition property="WillSignMacApp">
            <or>
                <equals arg1="${hostname}" arg2="jb"/>
                <equals arg1="${hostname}" arg2="jb.wavecable.com"/>
            </or>
        </condition>
    </target>
    <target name="SignMacApp" description="Mac App Signing" depends="SignMacApp.Check,BuildMacApp" if="WillSignMacApp">
        <apply executable="codesign">
            <arg line="-v -f -s '${SignIdentity}'"/>
            <fileset dir="${OutDir}/DVA.app/Contents/MacOS">
                <include name="*.jar"/>
                <include name="*.txt"/> <!-- TODO: user space -->
                <include name="*.properties"/> <!-- TODO: user space -->
            </fileset>
        </apply>
        <exec executable="codesign" dir="${OutDir}" failonerror="true">
            <arg line="-v -f -s '${SignIdentity}' DVA.app"/>
        </exec>
        <!-- verify codesign -->
        <exec executable="codesign" dir="${OutDir}" failonerror="true">
            <arg line="-vv DVA.app"/>
        </exec>
        <!-- verify gatekeeper -->
        <exec executable="spctl" dir="${OutDir}" failonerror="true">
            <arg line="-vv --assess --type execute DVA.app"/>
        </exec>
    </target>

    <target name="ResHack">
        <!-- Params:
            file: the path of the Windows binary to ResHack.
            icon: the new icon to embed in the binary.
            ini: the WinRun4J .ini to embed in the binary. -->
        <echo level="info">Processing with ResourceHacker: ${file}</echo>
        <echo file="temp.rh">[FILENAMES]
Open=   ${file}
SaveAs= ${file}
Log=    console
[COMMANDS]
-delete ICONGROUP,,
-addoverwrite ${icon}, ICONGROUP,1,0
-addoverwrite ${ini}, 687,1,0
-addoverwrite ${stringtable}, STRINGTABLE,1,0
</echo>
        <exec executable="${Wine}" osfamily="mac" failonerror="true">
            <env key="WINEPREFIX" value="${WinePrefix}"/>
            <arg line="${ResHackerDir}${file.separator}ResourceHacker.exe -script temp.rh -log console"/>
        </exec>
        <exec executable="${ResHackerDir}${file.separator}ResourceHacker.exe" osfamily="windows" failonerror="true">
            <arg line="-script temp.rh -log console"/>
        </exec>
        <delete file="temp.rh"/>
    </target>
    <target name="BuildWinExes">
        <copy tofile="${WinOutDir32}DVA.exe" file="${WinRun4JDir}WinRun4J.exe" overwrite="true"/>
        <copy tofile="${WinOutDir64}DVA.exe" file="${WinRun4JDir}WinRun4J64.exe" overwrite="true"/>
        <copy tofile="${WinOutDir32}DVA.scr" file="${WinRun4JDir}WinRun4J.exe" overwrite="true"/>
        <copy tofile="${WinOutDir64}DVA.scr" file="${WinRun4JDir}WinRun4J64.exe" overwrite="true"/>
        <copy tofile="${WinOutDir32}ttfetch.exe" file="${WinRun4JDir}WinRun4J.exe" overwrite="true"/>
        <copy tofile="${WinOutDir64}ttfetch.exe" file="${WinRun4JDir}WinRun4J64.exe" overwrite="true"/>

        <antcall target="ResHack">
            <param name="file" value="${WinOutDir32Wine}DVA.exe" />
            <param name="icon" value="win\dva.ico" />
            <param name="ini" value="win\DVA.ini" />
            <param name="stringtable" value="win\ScreenSaverStringTable.res"/>
        </antcall>
        <antcall target="ResHack">
            <param name="file" value="${WinOutDir64Wine}DVA.exe" />
            <param name="icon" value="win\dva.ico" />
            <param name="ini" value="win\DVA.ini" />
            <param name="stringtable" value="win\ScreenSaverStringTable.res"/>
        </antcall>
        <antcall target="ResHack">
            <param name="file" value="${WinOutDir32Wine}DVA.scr" />
            <param name="icon" value="win\pse.ico" />
            <param name="ini" value="win\DVA.ini" />
            <param name="stringtable" value="win\ScreenSaverStringTable.res"/>
        </antcall>
        <antcall target="ResHack">
            <param name="file" value="${WinOutDir64Wine}DVA.scr" />
            <param name="icon" value="win\pse.ico" />
            <param name="ini" value="win\DVA.ini" />
            <param name="stringtable" value="win\ScreenSaverStringTable.res"/>
        </antcall>
        <antcall target="ResHack">
            <param name="file" value="${WinOutDir32Wine}ttfetch.exe" />
            <param name="icon" value="win\dva.ico" />
            <param name="ini" value="win\ttfetch.ini" />
            <param name="stringtable" value="win\ScreenSaverStringTable.res"/>
        </antcall>
        <antcall target="ResHack">
            <param name="file" value="${WinOutDir64Wine}ttfetch.exe" />
            <param name="icon" value="win\dva.ico" />
            <param name="ini" value="win\ttfetch.ini" />
            <param name="stringtable" value="win\ScreenSaverStringTable.res"/>
        </antcall>
    </target>
    
    <target name="SetupCommon" description="common setup crap">
        <copy file="resources/new.html" todir="${OutDir}"/>
        <exec executable="/bin/sh" outputproperty="DVAVersion" osfamily="mac" failonerror="true">
            <arg value="-c"/>
            <arg value="cat src/jb/dvacommon/DVA.java | grep '&quot;\d\+\.\d\+\.\d\+&quot;' | sed 's/.*&quot;\(.*\)&quot;[^&quot;]*$/\1/'"/>
        </exec>
        <exec executable="powershell.exe" outputproperty="DVAVersion" osfamily="windows" failonerror="true">
            <arg value="-command"/>
            <arg value="(gc src/jb/dvacommon/DVA.java -raw) -match '&quot;(\d\.\d\.\d)&quot;' | out-null; $matches[1]"/>
        </exec>
        <echo level="info">Read version string: ${DVAVersion}</echo>
    </target>
    
    <!-- Build Mac setup -->
    <target name="BuildMacDmg" description="Build Mac DMG" if="isMac" depends="BuildMacApp">
        <delete file="${OutDir}/${DmgName}.dmg" failonerror="false"/>
        <delete file="${OutDir}/${DmgName}.dmg.bz2" failonerror="false"/>
        <exec executable="hdiutil" failonerror="true">
            <arg line="create -megabytes ${DmgSizeMb} -volname &quot;${DmgVolumeName}&quot; -fs HFS+ ${OutDir}/${DmgName}.dmg"/>
        </exec>
        <exec executable="hdiutil" failonerror="true">
            <arg line="attach ${OutDir}/${DmgName}.dmg"/>
        </exec>
        <copy todir="${DmgMountPoint}" preservelastmodified="true">
            <fileset dir="${OutDir}">
                <include name="DVA.app/**"/>
            </fileset>
        </copy>
        <chmod perm="u+x" file="${DmgMountPoint}/DVA.app/Contents/MacOS/dva"/>
        <chmod perm="u+x" file="${DmgMountPoint}/DVA.app/Contents/MacOS/jre/Contents/Home/bin/java"/>
        <chmod perm="u+x" file="${DmgMountPoint}/DVA.app/Contents/MacOS/jre/Contents/Home/lib/jspawnhelper"/>
        <exec executable="osascript" failonerror="true">
            <arg line="-e 'tell application &quot;Finder&quot; to make alias file to posix file &quot;/Applications&quot; at posix file &quot;${DmgMountPoint}&quot;'"/>
        </exec>
        <sleep seconds="1"/>
        <exec executable="umount" failonerror="true">
            <arg value="${DmgMountPoint}"/>
        </exec>
        <echo level="info">Bzip2 compression: ${bzip2compression}</echo>
        <exec executable="bzip2" failonerror="true">
            <arg line="--verbose --${bzip2compression} ${OutDir}/${DmgName}.dmg"/>
        </exec>
    </target>
    
    <!-- Build windows setup -->
    <target name="BuildWinSetup" description="Build Windows setup EXE" depends="CreateJar,SetupCommon,BuildWinExes" if="InnoSetupCompilerExists">
        <exec executable="sed" dir="${basedir}" osfamily="mac" failonerror="true">
            <arg value="-i"/>
            <arg value=".bak"/>
            <arg value="s/5\.[[:digit:]]\.[[:digit:]]/${DVAVersion}/"/>
            <arg value="win${file.separator}setup.iss"/>
        </exec>
        <exec executable="powershell.exe" dir="${basedir}" osfamily="windows" failonerror="true">
            <arg value="-command"/>
            <arg value="(gc 'win${file.separator}setup.iss' -raw) -replace '5\.\d\.\d', '${DVAVersion}' | out-file 'win${file.separator}setup.iss'"/>
        </exec>
        <echo level="info">Inno Setup compression: ${innosetupcompression}</echo>
        <property name="innosetupargs" value="/Qp /Dinnosetupcompression=${innosetupcompression} /Dversion=${DVAVersion} win\setup.iss"/>
        <exec executable="${Wine}" osfamily="mac" failonerror="true">
            <env key="WINEPREFIX" value="${WinePrefix}"/>
            <arg line="&quot;${InnoSetupCompiler}&quot; ${innosetupargs}"/>
        </exec>
        <exec executable="${InnoSetupCompiler}" osfamily="windows" failonerror="true">
            <arg line="${innosetupargs}"/>
        </exec>
    </target>

    <!-- Sign windows setup -->
    <target name="SignWinSetup.Check">
    	<echo level="info">Checking for ${SignKey}</echo>
        <available file="${SignKey}" property="SignKeyExists"/>
    </target>
    <target name="SignWinSetup" depends="SignWinSetup.Check" if="SignKeyExists">
        <exec executable="signcode" dir="${OutDir}" failonerror="true">
            <arg line="signcode -a sha1 -t http://timestamp.digicert.com -spc ${SignCert} -pvk ${SignKey} -n &quot;DVA&quot; DVA5Setup.exe"/>
        </exec>
    </target>

    <!-- Linux Debian Setup -->
    <target name="BuildLinuxDeb" if="isMac" depends="CreateJar,SetupCommon">
        <delete failonerror="false" dir="${DpkgRoot}"/>
        <mkdir dir="${DpkgRoot}"/>
        <mkdir dir="${DpkgRoot}${file.separator}DEBIAN"/>
        <mkdir dir="${DpkgRoot}${file.separator}usr${file.separator}bin"/>
        <mkdir dir="${DpkgRoot}${file.separator}usr${file.separator}share${file.separator}dva"/>
        <copy todir="${DpkgRoot}${file.separator}DEBIAN" preservelastmodified="true" file="${basedir}${file.separator}linux${file.separator}debian${file.separator}control"/>
        <copy todir="${DpkgRoot}${file.separator}usr${file.separator}share${file.separator}applications" preservelastmodified="true" file="${basedir}${file.separator}linux${file.separator}debian${file.separator}dva.desktop"/>
        <copy todir="${DpkgRoot}${file.separator}usr${file.separator}bin" preservelastmodified="true" file="${basedir}${file.separator}linux${file.separator}dva"/>
        <copy todir="${DpkgRoot}${file.separator}usr${file.separator}share${file.separator}dva" preservelastmodified="true" file="${basedir}${file.separator}resources${file.separator}dva_icon.png"/>
        <copy todir="${DpkgRoot}${file.separator}usr${file.separator}share${file.separator}dva" preservelastmodified="true">
            <fileset dir="${OutDir}">
                <include name="*.txt"/>
                <include name="DVA.jar"/>
            </fileset>
            <fileset dir="jars">
                <include name="*.jar"/>
            </fileset>
            <fileset dir="ffmpeg/linux/amd64">
                <include name="*"/>
            </fileset>
        </copy>
        <chmod perm="+x" file="${DpkgRoot}${file.separator}usr${file.separator}bin${file.separator}dva"/>
        <exec executable="sed" dir="${basedir}" osfamily="mac" failonerror="true">
            <arg value="-i"/>
            <arg value=".bak"/>
            <arg value="s/[[:digit:]]*\.[[:digit:]]*\.[[:digit:]]*/${DVAVersion}/"/>
            <arg value="linux${file.separator}debian${file.separator}control"/>
        </exec>
        <exec executable="powershell.exe" dir="${basedir}" osfamily="windows" failonerror="true">
            <arg value="-command"/>
            <arg value="(gc 'linux${file.separator}debian${file.separator}control' -raw) -replace '\d*\.\d*\.\d*', '${DVAVersion}' | out-file 'linux${file.separator}debian${file.separator}control'"/>
        </exec>
        <exec executable="fakeroot" dir="${OutDir}" failonerror="true">
            <arg value="dpkg"/>
            <arg value="--build"/>
            <arg value="debian"/>
        </exec>
        <move file="${OutDir}${file.separator}debian.deb" tofile="${OutDir}${file.separator}DVA5.deb"/>
    </target>

    <target name="AllSetups" description="Build all setups" depends="Clean,BuildMacDmg,BuildWinSetup,SignWinSetup,BuildLinuxDeb">
        <java jar="${AppBundleContents}/DVA.jar" fork="true">
            <arg value="/clearsettings"/>
        </java>
        <echo level="info">Version ${DVAVersion}</echo>
        <copy todir="build/TestUpdateDrop/${DVAVersion}">
            <fileset dir="${OutDir}">
                <include name="${DmgName}.dmg.bz2"/>
                <include name="${WindowsSetupName}.exe"/>
                <include name="DVA5.deb"/>
                <include name="new.html"/>
            </fileset>
        </copy>
    </target>
    
    <target name="Run" description="Fast dev build" depends="BuildMacApp">
        <exec executable="build/Output/DVA.app/Contents/MacOS/dva"/>
    </target>

    <target name="SoundJars">
        <foreach target="SoundJar" param="dir">
            <path>
                <dirset dir="sounds" includes="*"/>
            </path>
        </foreach>
    </target>
    <target name="SoundJar">
        <basename property="name" file="${dir}"/>
        <zip basedir="${dir}"
             destfile="build${file.separator}soundjars${file.separator}${name}.jar"
             compress="false">
        </zip>
    </target>
</project>

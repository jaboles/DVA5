<?xml version="1.0" ?>
<!-- Configuration of the Ant build system to generate a Jar file --> 
<project name="DVA" default="CreateJar">
    <property environment="env"/>
    <exec executable="hostname" outputproperty="hostname"/>
    <echo>Running on ${hostname} (${os.name})</echo>
    <property name="IntDir" value="build${file.separator}Intermediate"/>
    <property name="InDir" value="${IntDir}${file.separator}Debug"/>
    <property name="OutDir" value="build${file.separator}Debug"/>
    <property name="AppBundle" value="${OutDir}/DVA.app"/>
    <property name="AppBundleContents" value="${AppBundle}/Contents/MacOS"/>
	<property name="Classpath" value="jars/azure-storage-2.2.0.jar${path.separator}jars/swingx-all-1.6.4.jar${path.separator}jars/jdom.jar${path.separator}jars/swixml.jar${path.separator}jars/jna-5.10.0.jar${path.separator}jars/jna-platform-5.10.0.jar${path.separator}jars/javatuples-1.2.jar${path.separator}jars/mac/xuggle-xuggler-5.4.jar${path.separator}jars/log4j-api-2.14.1.jar${path.separator}jars/protobuf-java-3.19.1.jar"/>
    <condition property="bzip2compression" value="fast" else="best">
        <isset property="fast"/>
    </condition>
    <condition property="innosetupcompression" value="none" else="lzma2/ultra">
        <isset property="fast"/>
    </condition>

    <!-- Mac signing identity in Keychain -->
    <property name="SignIdentity" value="Jonathan Boles"/>
    <!-- Windows signing cert paths. -->
    <property name="SignKey" value="/Users/jb/Software/jb.pvk"/>
    <property name="SignCert" value="/Users/jb/Software/jb.spc"/>

	<!-- Mac setup -->
    <property name="DmgName" value="DVA5"/>
    <property name="DmgVolumeName" value="DVA 5"/>
    <property name="DmgMountPoint" value="/Volumes/${DmgVolumeName}"/>
    <property name="DmgSizeMb" value="185"/>
	
	<!-- Windows setup -->
    <!--<property name="Wine" value="wine"/>-->
    <property name="Wine" value="wine"/>
    <property name="WinePrefix" value="${user.home}/.wine"/>
    <condition property="ResHackerDir" value="${basedir}${file.separator}..${file.separator}resource_hacker${file.separator}"
                                        else="${user.home}${file.separator}resource_hacker${file.separator}">
        <os family="mac"/>
    </condition>
    <condition property="WinRun4JDir" value="${basedir}${file.separator}..${file.separator}winrun4j${file.separator}bin${file.separator}"
                                       else="${user.home}${file.separator}winrun4j${file.separator}bin${file.separator}">
        <os family="mac"/>
    </condition>
    <condition property="WinOutDir32" value="${basedir}${file.separator}${OutDir}${file.separator}win${file.separator}i386${file.separator}"
                                       else="${OutDir}${file.separator}win${file.separator}i386${file.separator}">
        <os family="mac"/>
    </condition>
    <condition property="WinOutDir64" value="${basedir}${file.separator}${OutDir}${file.separator}win${file.separator}amd64${file.separator}"
                                       else="${OutDir}${file.separator}win${file.separator}amd64${file.separator}">
        <os family="mac"/>
    </condition>
    <property name="WinResourcesDir" value="${basedir}${file.separator}win${file.separator}"/>
    <condition property="InnoSetupCompiler" value="${WinePrefix}/drive_c/Program Files (x86)/Inno Setup 5/ISCC.exe"
                                             else="c:\Program Files (x86)\Inno Setup 5\ISCC.exe">
        <os family="mac"/>
    </condition>
	<property name="WindowsSetupName" value="DVA5Setup"/>

    <!-- linux DEB -->
    <property name="DpkgRoot" value="${OutDir}${file.separator}debian"/>

    <loadresource property="BaseDirTemp">
        <propertyresource name="basedir"/>
        <filterchain>
            <tokenfilter>
                <filetokenizer/>
                <replacestring from="/" to="\"/>
            </tokenfilter>
        </filterchain>
    </loadresource>
    <property name="BaseDirWine" value="z:${BaseDirTemp}"/>
    <loadresource property="WinResourcesDirTemp">
        <propertyresource name="WinResourcesDir"/>
        <filterchain>
            <tokenfilter>
                <filetokenizer/>
                <replacestring from="/" to="\"/>
            </tokenfilter>
        </filterchain>
    </loadresource>
    <property name="WinResourcesDirWine" value="z:${WinResourcesDirTemp}"/>
    <loadresource property="WinRun4JDirTemp">
        <propertyresource name="WinRun4JDir"/>
        <filterchain>
            <tokenfilter>
                <filetokenizer/>
                <replacestring from="/" to="\"/>
            </tokenfilter>
        </filterchain>
    </loadresource>
    <property name="WinRun4JDirWine" value="z:${WinRun4JDirTemp}"/>
    <loadresource property="ResHackerDirTemp">
        <propertyresource name="ResHackerDir"/>
        <filterchain>
            <tokenfilter>
                <filetokenizer/>
                <replacestring from="/" to="\"/>
            </tokenfilter>
        </filterchain>
    </loadresource>
    <property name="ResHackerDirWine" value="z:${ResHackerDirTemp}"/>
    <loadresource property="WinOutDir32Temp">
        <propertyresource name="WinOutDir32"/>
        <filterchain>
            <tokenfilter>
                <filetokenizer/>
                <replacestring from="/" to="\"/>
            </tokenfilter>
        </filterchain>
    </loadresource>
    <property name="WinOutDir32Wine" value="z:${WinOutDir32Temp}"/>
    <loadresource property="WinOutDir64Temp">
        <propertyresource name="WinOutDir64"/>
        <filterchain>
            <tokenfilter>
                <filetokenizer/>
                <replacestring from="/" to="\"/>
            </tokenfilter>
        </filterchain>
    </loadresource>
    <property name="WinOutDir64Wine" value="z:${WinOutDir64Temp}"/>

    <condition property="isMac">
        <os family="mac" />
    </condition>
    <condition property="isWindows">
        <os family="windows" />
    </condition>

    <!-- Increments the build number -->
    <target name="IncrementBuildNumber" description="Increment build number">
        <buildnumber file="buildnumber.txt"/>
    </target>

    <target name="Clean" description="Clean output folder">
        <delete failonerror="false" dir="${IntDir}"/>
        <delete failonerror="false" dir="${OutDir}"/>
    </target>
	
	<target name="Compile" description="Compile java code">
        <mkdir dir="${InDir}"/>
        <exec executable="protoc" failonerror="true">
            <arg value="--java_out=." />
            <!--<arg value="-proto_path=${proto.srcs}" />-->
            <arg line="gtfs-realtime_1007_extension.proto" />
        </exec>
        <javac fork="yes" srcdir="." destdir="${InDir}" classpath="${Classpath}" excludes="jb/common/nativefilechooser/*" debug="on" verbose="off" includeantruntime="no">
            <compilerarg value="-J-Xbootclasspath/p:"/>
        </javac>
		<!--<javac srcdir="." destdir="${InDir}" classpath="${Classpath}" excludes="jb/common/nativefilechooser/*" debug="on" verbose="off" includeantruntime="no"/>-->
	</target>

    <!-- After Eclipse compile task, prepare JAR file -->
    <target name="CreateJar" description="Create Jar file" depends="Compile,IncrementBuildNumber">
        <jar jarfile="${OutDir}/DVA.jar" manifest="Manifest" level="1">
        	<fileset dir="${InDir}"/>
        	<fileset dir=".">
        		<patternset id="jar-resources">
                    <include name="*.tt"/>
                    <include name="buildnumber.txt"/>
                    <include name="**/*.xml"/>
                    <include name="jb/**/*.properties"/>
                    <include name="jb/**/*.png"/>
                    <include name="resources/**"/>
          			<exclude name=".metadata/**"/>
        	    </patternset>
        	</fileset>
    	</jar>
    </target>
    
    <target name="BundledResources" description="Resources that are bundled with the app but not part of the jar">
        <copy todir="${OutDir}" preservelastmodified="true">
            <fileset dir=".">
            	<patternset id="bundled-resources">
                    <include name="*.txt"/>
                    <exclude name="buildnumber.txt"/>
            	</patternset>
            </fileset>
        </copy>
    </target>
    
    <!-- Builds the Mac app bundle. Windows uses a stub .exe launcher so no need to update it. -->
    <target name="CleanMacApp" description="Clean the Mac DVA.app bundle">
        <delete failonerror="false" dir="${AppBundle}"/>
    </target>
    <target name="UpdateMacApp" description="Update contents of the mac app" depends="CreateJar,BundledResources">
        <copy todir="${OutDir}">
            <fileset dir="mac">
                <include name="DVA.app/**"/>
            </fileset>
        </copy>
        <copy todir="${AppBundleContents}" preservelastmodified="true">
        	<fileset dir=".">
                <include name="log4j2.xml"/>
            </fileset>
        	<fileset dir="${OutDir}">
        		<include name="*.txt"/>
        		<include name="DVA.jar"/>
        	</fileset>
            <fileset dir="jars">
            	<include name="*.jar"/>
            </fileset>
            <fileset dir="jars/mac">
                <include name="*.jar"/>
            </fileset>
        </copy>
        <untar dest="${IntDir}\jre\mac" compression="gzip" overwrite="false">
            <fileset dir=".">
                <include name="OpenJDK*-jre_x64_mac_*.tar.gz"/>
            </fileset>
        </untar>
        <pathconvert property="macjredir">
            <dirset dir="${IntDir}\jre\mac" includes="jdk-*-jre"/>
        </pathconvert>
        <copy todir="${AppBundleContents}\jre" preservelastmodified="true">
            <fileset dir="${macjredir}">
                <include name="**"/>
            </fileset>
        </copy>
        <chmod perm="u+x" file="${AppBundleContents}/dva"/>
        <chmod perm="u+x" file="${AppBundleContents}/jre/Contents/Home/bin/java"/>
        <chmod perm="u+x" file="${AppBundleContents}/jre/Contents/Home/lib/jspawnhelper"/>
    </target>

    <target name="SignMacApp.Check">
    	<echo>Running on ${hostname}</echo>
        <condition property="WillSignMacApp">
            <or>
                <equals arg1="${hostname}" arg2="jb"/>
                <equals arg1="${hostname}" arg2="jb.local"/>
            </or>
        </condition>
    </target>
    <target name="SignMacApp" description="Mac App Signing" depends="SignMacApp.Check,UpdateMacApp" if="WillSignMacApp">
        <apply executable="codesign">
            <arg line="-v -f -s '${SignIdentity}'"/>
            <fileset dir="${OutDir}/DVA.app/Contents/MacOS">
                <include name="*.jar"/>
                <include name="*.txt"/> <!-- TODO: user space -->
                <include name="*.properties"/> <!-- TODO: user space -->
            </fileset>
        </apply>
        <exec executable="codesign" dir="${OutDir}">
            <arg line="-v -f -s '${SignIdentity}' DVA.app"/>
        </exec>
        <!-- verify codesign -->
        <exec executable="codesign" dir="${OutDir}" failonerror="true">
            <arg line="-vv DVA.app"/>
        </exec>
        <!-- verify gatekeeper -->
        <exec executable="spctl" dir="${OutDir}" failonerror="false">
            <arg line="-vv --assess --type execute DVA.app"/>
        </exec>
    </target>

    <target name="RebuildMacApp" description="Clean/rebuild the mac app" if="isMac" depends="CleanMacApp,UpdateMacApp,SignMacApp,SetupCommon">
        <exec executable="plutil" dir="${OutDir}">
            <arg value="-replace"/>
            <arg value="CFBundleGetInfoString"/>
            <arg value="-string"/>
            <arg value="${DVAVersion}"/>
            <arg value="DVA.app/Contents/Info.plist"/>
        </exec>
        <exec executable="plutil" dir="${OutDir}">
            <arg value="-replace"/>
            <arg value="CFBundleShortVersionString"/>
            <arg value="-string"/>
            <arg value="${DVAVersion}"/>
            <arg value="DVA.app/Contents/Info.plist"/>
        </exec>
        <exec executable="plutil" dir="${OutDir}">
            <arg value="-replace"/>
            <arg value="CFBundleVersion"/>
            <arg value="-string"/>
            <arg value="${DVAVersion}"/>
            <arg value="DVA.app/Contents/Info.plist"/>
        </exec>
        <exec executable="plutil" dir="${OutDir}">
            <arg value="-replace"/>
            <arg value="NSHumanReadableCopyright"/>
            <arg value="-string"/>
            <arg value="Copyright © Jonathan Boles 1999-2017"/>
            <arg value="DVA.app/Contents/Info.plist"/>
        </exec>
    </target>

    <target name="BuildWinExes">
        <copy tofile="${WinOutDir32}DVA.exe" file="${WinRun4JDir}WinRun4J.exe"/>
        <copy tofile="${WinOutDir64}DVA.exe" file="${WinRun4JDir}WinRun4J64.exe"/>
        <copy tofile="${WinOutDir32}DVA.scr" file="${WinRun4JDir}WinRun4J.exe"/>
        <copy tofile="${WinOutDir64}DVA.scr" file="${WinRun4JDir}WinRun4J64.exe"/>
        <copy tofile="${WinOutDir32}ttfetch.exe" file="${WinRun4JDir}WinRun4J.exe"/>
        <copy tofile="${WinOutDir64}ttfetch.exe" file="${WinRun4JDir}WinRun4J64.exe"/>

        <exec executable="${Wine}" osfamily="mac">
            <env key="WINEPREFIX" value="${WinePrefix}"/>
            <arg value="${ResHackerDirWine}ResourceHacker.exe"/>
            <arg value="-delete"/>
            <arg value="${WinOutDir32Wine}DVA.exe,"/>
            <arg value="${WinOutDir32Wine}DVA.exe,"/>
            <arg value="ICONGROUP,,"/>
        </exec>
        <exec executable="${Wine}" osfamily="mac">
            <env key="WINEPREFIX" value="${WinePrefix}"/>
            <arg value="${WinRun4JDirWine}RCEDIT.exe"/>
            <arg value="/I"/>
            <arg value="${WinOutDir32Wine}DVA.exe"/>
            <arg value="${BaseDirWine}\dva.ico"/>
        </exec>
        <exec executable="${Wine}" osfamily="mac">
            <env key="WINEPREFIX" value="${WinePrefix}"/>
            <arg value="${WinRun4JDirWine}RCEDIT.exe"/>
            <arg value="/N"/>
            <arg value="${WinOutDir32Wine}DVA.exe"/>
            <arg value="${BaseDirWine}\win\DVA.ini"/>
        </exec>
        <exec executable="${Wine}" osfamily="mac">
            <env key="WINEPREFIX" value="${WinePrefix}"/>
            <arg value="${ResHackerDirWine}ResourceHacker.exe"/>
            <arg value="-delete"/>
            <arg value="${WinOutDir64Wine}DVA.exe,"/>
            <arg value="${WinOutDir64Wine}DVA.exe,"/>
            <arg value="ICONGROUP,,"/>
        </exec>
        <exec executable="${Wine}" osfamily="mac">
            <env key="WINEPREFIX" value="${WinePrefix}"/>
            <arg value="${WinRun4JDirWine}RCEDIT.exe"/>
            <arg value="/I"/>
            <arg value="${WinOutDir64Wine}DVA.exe"/>
            <arg value="${BaseDirWine}\dva.ico"/>
        </exec>
        <exec executable="${Wine}" osfamily="mac">
            <env key="WINEPREFIX" value="${WinePrefix}"/>
            <arg value="${WinRun4JDirWine}RCEDIT.exe"/>
            <arg value="/N"/>
            <arg value="${WinOutDir64Wine}DVA.exe"/>
            <arg value="${BaseDirWine}\win\DVA.ini"/>
        </exec>
        <exec executable="${Wine}" osfamily="mac">
            <env key="WINEPREFIX" value="${WinePrefix}"/>
            <arg value="${ResHackerDirWine}ResourceHacker.exe"/>
            <arg value="-delete"/>
            <arg value="${WinOutDir32Wine}DVA.scr,"/>
            <arg value="${WinOutDir32Wine}DVA.scr,"/>
            <arg value="ICONGROUP,,"/>
        </exec>
        <exec executable="${Wine}" osfamily="mac">
            <env key="WINEPREFIX" value="${WinePrefix}"/>
            <arg value="${WinRun4JDirWine}RCEDIT.exe"/>
            <arg value="/I"/>
            <arg value="${WinOutDir32Wine}DVA.scr"/>
            <arg value="${BaseDirWine}\resources\pse.ico"/>
        </exec>
        <exec executable="${Wine}" osfamily="mac">
            <env key="WINEPREFIX" value="${WinePrefix}"/>
            <arg value="${WinRun4JDirWine}RCEDIT.exe"/>
            <arg value="/N"/>
            <arg value="${WinOutDir32Wine}DVA.scr"/>
            <arg value="${BaseDirWine}\win\DVA.ini"/>
        </exec>
        <exec executable="${Wine}" osfamily="mac">
            <env key="WINEPREFIX" value="${WinePrefix}"/>
            <arg value="${ResHackerDirWine}ResourceHacker.exe"/>
            <arg value="-addoverwrite"/>
            <arg value="${WinOutDir32Wine}DVA.scr,"/>
            <arg value="${WinOutDir32Wine}DVA.scr,"/>
            <arg value="${WinResourcesDirWine}ScreenSaverStringTable.res,"/>
            <arg value="STRINGTABLE,,"/>
        </exec>
        <exec executable="${Wine}" osfamily="mac">
            <env key="WINEPREFIX" value="${WinePrefix}"/>
            <arg value="${ResHackerDirWine}ResourceHacker.exe"/>
            <arg value="-delete"/>
            <arg value="${WinOutDir64Wine}DVA.scr,"/>
            <arg value="${WinOutDir64Wine}DVA.scr,"/>
            <arg value="ICONGROUP,,"/>
        </exec>
        <exec executable="${Wine}" osfamily="mac">
            <env key="WINEPREFIX" value="${WinePrefix}"/>
            <arg value="${WinRun4JDirWine}RCEDIT.exe"/>
            <arg value="/I"/>
            <arg value="${WinOutDir64Wine}DVA.scr"/>
            <arg value="${BaseDirWine}\resources\pse.ico"/>
        </exec>
        <exec executable="${Wine}" osfamily="mac">
            <env key="WINEPREFIX" value="${WinePrefix}"/>
            <arg value="${WinRun4JDirWine}RCEDIT.exe"/>
            <arg value="/N"/>
            <arg value="${WinOutDir64Wine}DVA.scr"/>
            <arg value="${BaseDirWine}\win\DVA.ini"/>
        </exec>
        <exec executable="${Wine}" osfamily="mac">
            <env key="WINEPREFIX" value="${WinePrefix}"/>
            <arg value="${ResHackerDirWine}ResourceHacker.exe"/>
            <arg value="-addoverwrite"/>
            <arg value="${WinOutDir64Wine}DVA.scr,"/>
            <arg value="${WinOutDir64Wine}DVA.scr,"/>
            <arg value="${WinResourcesDirWine}ScreenSaverStringTable.res,"/>
            <arg value="STRINGTABLE,,"/>
        </exec>
        <exec executable="${Wine}" osfamily="mac">
            <env key="WINEPREFIX" value="${WinePrefix}"/>
            <arg value="${ResHackerDirWine}ResourceHacker.exe"/>
            <arg value="-delete"/>
            <arg value="${WinOutDir32Wine}ttfetch.exe,"/>
            <arg value="${WinOutDir32Wine}ttfetch.exe,"/>
            <arg value="ICONGROUP,,"/>
        </exec>
        <exec executable="${Wine}" osfamily="mac">
            <env key="WINEPREFIX" value="${WinePrefix}"/>
            <arg value="${WinRun4JDirWine}RCEDIT.exe"/>
            <arg value="/I"/>
            <arg value="${WinOutDir32Wine}ttfetch.exe"/>
            <arg value="${BaseDirWine}\dva.ico"/>
        </exec>
        <exec executable="${Wine}" osfamily="mac">
            <env key="WINEPREFIX" value="${WinePrefix}"/>
            <arg value="${WinRun4JDirWine}RCEDIT.exe"/>
            <arg value="/N"/>
            <arg value="${WinOutDir32Wine}ttfetch.exe"/>
            <arg value="${BaseDirWine}\win\ttfetch.ini"/>
        </exec>
        <exec executable="${Wine}" osfamily="mac">
            <env key="WINEPREFIX" value="${WinePrefix}"/>
            <arg value="${ResHackerDirWine}ResourceHacker.exe"/>
            <arg value="-delete"/>
            <arg value="${WinOutDir64Wine}ttfetch.exe,"/>
            <arg value="${WinOutDir64Wine}ttfetch.exe,"/>
            <arg value="ICONGROUP,,"/>
        </exec>
        <exec executable="${Wine}" osfamily="mac">
            <env key="WINEPREFIX" value="${WinePrefix}"/>
            <arg value="${WinRun4JDirWine}RCEDIT.exe"/>
            <arg value="/I"/>
            <arg value="${WinOutDir64Wine}ttfetch.exe"/>
            <arg value="${BaseDirWine}\dva.ico"/>
        </exec>
        <exec executable="${Wine}" osfamily="mac">
            <env key="WINEPREFIX" value="${WinePrefix}"/>
            <arg value="${WinRun4JDirWine}RCEDIT.exe"/>
            <arg value="/N"/>
            <arg value="${WinOutDir64Wine}ttfetch.exe"/>
            <arg value="${BaseDirWine}\win\ttfetch.ini"/>
        </exec>

        <exec executable="${ResHackerDir}ResourceHacker.exe" osfamily="windows">
            <arg value="-delete"/>
            <arg value="${WinOutDir32}DVA.exe,"/>
            <arg value="${WinOutDir32}DVA.exe,"/>
            <arg value="ICONGROUP,,"/>
        </exec>
        <exec executable="${WinRun4JDir}RCEDIT.exe" osfamily="windows">
            <arg value="/I"/>
            <arg value="${WinOutDir32}DVA.exe"/>
            <arg value="${basedir}\dva.ico"/>
        </exec>
        <exec executable="${WinRun4JDir}RCEDIT.exe" osfamily="windows">
            <arg value="/N"/>
            <arg value="${WinOutDir32}DVA.exe"/>
            <arg value="${basedir}\win\DVA.ini"/>
        </exec>
        <exec executable="${ResHackerDir}ResourceHacker.exe" osfamily="windows">
            <arg value="-delete"/>
            <arg value="${WinOutDir64}DVA.exe,"/>
            <arg value="${WinOutDir64}DVA.exe,"/>
            <arg value="ICONGROUP,,"/>
        </exec>
        <exec executable="${WinRun4JDir}RCEDIT.exe" osfamily="windows">
            <arg value="/I"/>
            <arg value="${WinOutDir64}DVA.exe"/>
            <arg value="${basedir}\dva.ico"/>
        </exec>
        <exec executable="${WinRun4JDir}RCEDIT.exe" osfamily="windows">
            <arg value="/N"/>
            <arg value="${WinOutDir64}DVA.exe"/>
            <arg value="${basedir}\win\DVA.ini"/>
        </exec>
        <exec executable="${ResHackerDir}ResourceHacker.exe" osfamily="windows">
            <arg value="-delete"/>
            <arg value="${WinOutDir32}DVA.scr,"/>
            <arg value="${WinOutDir32}DVA.scr,"/>
            <arg value="ICONGROUP,,"/>
        </exec>
        <exec executable="${WinRun4JDir}RCEDIT.exe" osfamily="windows">
            <arg value="/I"/>
            <arg value="${WinOutDir32}DVA.scr"/>
            <arg value="${basedir}\resources\pse.ico"/>
        </exec>
        <exec executable="${WinRun4JDir}RCEDIT.exe" osfamily="windows">
            <arg value="/N"/>
            <arg value="${WinOutDir32}DVA.scr"/>
            <arg value="${basedir}\win\DVA.ini"/>
        </exec>
        <exec executable="${ResHackerDir}ResourceHacker.exe" osfamily="windows">
            <arg value="-addoverwrite"/>
            <arg value="${WinOutDir32}DVA.scr,"/>
            <arg value="${WinOutDir32}DVA.scr,"/>
            <arg value="${WinResourcesDir}ScreenSaverStringTable.res,"/>
            <arg value="STRINGTABLE,,"/>
        </exec>
        <exec executable="${ResHackerDir}ResourceHacker.exe" osfamily="windows">
            <arg value="-delete"/>
            <arg value="${WinOutDir64}DVA.scr,"/>
            <arg value="${WinOutDir64}DVA.scr,"/>
            <arg value="ICONGROUP,,"/>
        </exec>
        <exec executable="${WinRun4JDir}RCEDIT.exe" osfamily="windows">
            <arg value="/I"/>
            <arg value="${WinOutDir64}DVA.scr"/>
            <arg value="${basedir}\resources\pse.ico"/>
        </exec>
        <exec executable="${WinRun4JDir}RCEDIT.exe" osfamily="windows">
            <arg value="/N"/>
            <arg value="${WinOutDir64}DVA.scr"/>
            <arg value="${basedir}\win\DVA.ini"/>
        </exec>
        <exec executable="${ResHackerDir}ResourceHacker.exe" osfamily="windows">
            <arg value="-addoverwrite"/>
            <arg value="${WinOutDir64}DVA.scr,"/>
            <arg value="${WinOutDir64}DVA.scr,"/>
            <arg value="${WinResourcesDir}ScreenSaverStringTable.res,"/>
            <arg value="STRINGTABLE,,"/>
        </exec>
        <exec executable="${ResHackerDir}ResourceHacker.exe" osfamily="windows">
            <arg value="-delete"/>
            <arg value="${WinOutDir32}ttfetch.exe,"/>
            <arg value="${WinOutDir32}ttfetch.exe,"/>
            <arg value="ICONGROUP,,"/>
        </exec>
        <exec executable="${WinRun4JDir}RCEDIT.exe" osfamily="windows">
            <arg value="/I"/>
            <arg value="${WinOutDir32}ttfetch.exe"/>
            <arg value="${basedir}\dva.ico"/>
        </exec>
        <exec executable="${WinRun4JDir}RCEDIT.exe" osfamily="windows">
            <arg value="/N"/>
            <arg value="${WinOutDir32}ttfetch.exe"/>
            <arg value="${basedir}\win\ttfetch.ini"/>
        </exec>
        <exec executable="${ResHackerDir}ResourceHacker.exe" osfamily="windows">
            <arg value="-delete"/>
            <arg value="${WinOutDir64}ttfetch.exe,"/>
            <arg value="${WinOutDir64}ttfetch.exe,"/>
            <arg value="ICONGROUP,,"/>
        </exec>
        <exec executable="${WinRun4JDir}RCEDIT.exe" osfamily="windows">
            <arg value="/I"/>
            <arg value="${WinOutDir64}ttfetch.exe"/>
            <arg value="${basedir}\dva.ico"/>
        </exec>
        <exec executable="${WinRun4JDir}RCEDIT.exe" osfamily="windows">
            <arg value="/N"/>
            <arg value="${WinOutDir64}ttfetch.exe"/>
            <arg value="${basedir}\win\ttfetch.ini"/>
        </exec>

        <unzip dest="${IntDir}\jre\win32" overwrite="false">
            <fileset dir=".">
                <include name="OpenJDK*-jre_x86-32_windows_*.zip"/>
            </fileset>
        </unzip>
        <pathconvert property="win32jredir">
            <dirset dir="${IntDir}\jre\win32" includes="jdk-*-jre"/>
        </pathconvert>
        <copy todir="${WinOutDir32}\jre" preservelastmodified="true">
            <fileset dir="${win32jredir}">
                <include name="**"/>
            </fileset>
        </copy>
        <unzip dest="${IntDir}\jre\win64" overwrite="false">
            <fileset dir=".">
                <include name="OpenJDK*-jre_x64_windows_*.zip"/>
            </fileset>
        </unzip>
        <pathconvert property="win64jredir">
            <dirset dir="${IntDir}\jre\win64" includes="jdk-*-jre"/>
        </pathconvert>
        <copy todir="${WinOutDir64}\jre" preservelastmodified="true">
            <fileset dir="${win64jredir}">
                <include name="**"/>
            </fileset>
        </copy>
    </target>

    <!-- Source code zip file -->
    <target name="SourceArchive" description="Source code distribution">
        <zip destfile="${OutDir}/src.zip" basedir=".">
            <patternset refid="jar-resources"/>
            <patternset refid="bundled-resources"/>
            <include name="**/*.java"/>
            <include name="*.sh"/>
            <include name="mac/**"/>
            <include name="win/**"/>
            <include name="resources/**"/>
            <include name=".classpath"/>
            <include name=".project"/>
            <include name=".externalToolBuilders/**"/>
            <include name=".svnignore"/>
        </zip>
    </target>
    
    <target name="SetupCommon" description="common setup crap">
        <copy file="new.html" todir="${OutDir}"/>
        <exec executable="/bin/sh" outputproperty="DVAVersion" osfamily="mac">
            <arg value="-c"/>
            <arg value="cat jb/dvacommon/DVA.java | grep '&quot;\d\+\.\d\+\.\d\+&quot;' | sed 's/.*&quot;\(.*\)&quot;[^&quot;]*$/\1/'"/>
        </exec>
        <exec executable="powershell.exe" outputproperty="DVAVersion" osfamily="windows">
            <arg value="-command"/>
            <arg value="(gc jb/dvacommon/DVA.java -raw) -match '&quot;(\d\.\d\.\d)&quot;' | out-null; $matches[1]"/>
        </exec>
        <echo>Read version string: ${DVAVersion}</echo>
    </target>
    
    <!-- Build Mac setup -->
    <target name="BuildMacDmg" description="Build Mac DMG" if="isMac" depends="RebuildMacApp,SourceArchive,SetupCommon">
        <delete file="${OutDir}/${DmgName}.dmg" failonerror="false"/>
        <delete file="${OutDir}/${DmgName}.dmg.bz2" failonerror="false"/>
        <exec executable="hdiutil">
            <arg line="create -megabytes ${DmgSizeMb} -volname &quot;${DmgVolumeName}&quot; -fs HFS+ ${OutDir}/${DmgName}.dmg"/>
        </exec>
        <exec executable="hdiutil">
            <arg line="attach ${OutDir}/${DmgName}.dmg"/>
        </exec>
        <copy todir="${DmgMountPoint}" preservelastmodified="true">
            <fileset dir="${OutDir}">
                <include name="DVA.app/**"/>
                <include name="src.zip"/>
            </fileset>
        </copy>
        <chmod perm="u+x" file="${DmgMountPoint}/DVA.app/Contents/MacOS/dva"/>
        <chmod perm="u+x" file="${DmgMountPoint}/DVA.app/Contents/MacOS/jre/Contents/Home/bin/java"/>
        <chmod perm="u+x" file="${DmgMountPoint}/DVA.app/Contents/MacOS/jre/Contents/Home/lib/jspawnhelper"/>
        <exec executable="osascript">
            <arg line="-e 'tell application &quot;Finder&quot; to make alias file to posix file &quot;/Applications&quot; at posix file &quot;${DmgMountPoint}&quot;'"/>
        </exec>
        <sleep seconds="1"/>
        <exec executable="umount">
            <arg value="${DmgMountPoint}"/>
        </exec>
        <echo>Bzip2 compression: ${bzip2compression}</echo>
        <exec executable="bzip2">
            <arg line="--verbose --${bzip2compression} ${OutDir}/${DmgName}.dmg"/>
        </exec>
    </target>
    
    <target name="PrepareSoundJars">
        <exec executable="/bin/bash" dir=".">
            <arg value="makejars.sh"/>
        </exec>
    </target>

    <!-- Build windows setup -->
    <target name="BuildWinSetup.Check">
    	<echo>Checking for ${InnoSetupCompiler}</echo>
        <available file="${InnoSetupCompiler}" property="InnoSetupCompilerExists"/>
    </target>
    <target name="BuildWinSetup" description="Build Windows setup EXE" depends="BuildWinSetup.Check,CreateJar,BundledResources,SourceArchive,SetupCommon,BuildWinExes" if="InnoSetupCompilerExists">
        <exec executable="sed" dir="${basedir}" osfamily="mac">
            <arg value="-i"/>
            <arg value=".bak"/>
            <arg value="s/5\.[[:digit:]]\.[[:digit:]]/${DVAVersion}/"/>
            <arg value="${WinResourcesDir}setup.iss"/>
        </exec>
        <exec executable="powershell.exe" dir="${basedir}" osfamily="windows">
            <arg value="-command"/>
            <arg value="(gc '${WinResourcesDir}setup.iss' -raw) -replace '5\.\d\.\d', '${DVAVersion}' | out-file '${WinResourcesDir}setup.iss'"/>
        </exec>
        <echo>Inno Setup compression: ${innosetupcompression}</echo>
        <exec executable="${Wine}" osfamily="mac">
            <env key="WINEPREFIX" value="${WinePrefix}"/>
            <arg value="${InnoSetupCompiler}"/>
            <arg value="/Qp"/>
            <arg value="/Dinnosetupcompression=${innosetupcompression}"/>
            <arg value="/Dversion=${DVAVersion}"/>
            <arg value="${WinResourcesDirWine}setup.iss"/>
        </exec>
        <exec executable="${InnoSetupCompiler}" osfamily="windows">
            <arg value="/Qp"/>
            <arg value="/Dinnosetupcompression=${innosetupcompression}"/>
            <arg value="/Dversion=${DVAVersion}"/>
            <arg value="${WinResourcesDir}setup.iss"/>
        </exec>
    </target>

    <!-- Sign windows setup -->
    <target name="SignWinSetup.Check">
    	<echo>Checking for ${SignKey}</echo>
        <available file="${SignKey}" property="SignKeyExists"/>
    </target>
    <target name="SignWinSetup" depends="SignWinSetup.Check" if="SignKeyExists">
        <exec executable="signcode" dir="${OutDir}">
            <arg line="signcode -a sha1 -t http://timestamp.digicert.com -spc ${SignCert} -pvk ${SignKey} -n &quot;DVA&quot; DVA5Setup.exe"/>
        </exec>
    </target>

    <!-- Linux Debian Setup -->
    <target name="BuildLinuxDeb" if="isMac" depends="CreateJar,BundledResources,SourceArchive,SetupCommon">
        <delete failonerror="false" dir="${DpkgRoot}"/>
        <mkdir dir="${DpkgRoot}"/>
        <mkdir dir="${DpkgRoot}${file.separator}DEBIAN"/>
        <mkdir dir="${DpkgRoot}${file.separator}usr${file.separator}bin"/>
        <mkdir dir="${DpkgRoot}${file.separator}usr${file.separator}share${file.separator}dva"/>
        <copy todir="${DpkgRoot}${file.separator}DEBIAN" preservelastmodified="true" file="${basedir}${file.separator}linux${file.separator}debian${file.separator}control"/>
        <copy todir="${DpkgRoot}${file.separator}usr${file.separator}share${file.separator}applications" preservelastmodified="true" file="${basedir}${file.separator}linux${file.separator}debian${file.separator}dva.desktop"/>
        <copy todir="${DpkgRoot}${file.separator}usr${file.separator}bin" preservelastmodified="true" file="${basedir}${file.separator}linux${file.separator}dva"/>
        <copy todir="${DpkgRoot}${file.separator}usr${file.separator}share${file.separator}dva" preservelastmodified="true" file="${basedir}${file.separator}resources${file.separator}dva_icon.png"/>
        <copy todir="${DpkgRoot}${file.separator}usr${file.separator}share${file.separator}dva" preservelastmodified="true">
            <fileset dir="${OutDir}">
                <include name="*.txt"/>
                <include name="src.zip"/>
                <include name="DVA.jar"/>
                <include name="*.jar"/>
            </fileset>
            <fileset dir="jars">
                <include name="*.jar"/>
            </fileset>
            <fileset dir="jars/linux">
                <include name="*.jar"/>
            </fileset>
        </copy>
        <chmod perm="+x" file="${DpkgRoot}${file.separator}usr${file.separator}bin${file.separator}dva"/>
        <exec executable="sed" dir="${basedir}" osfamily="mac">
            <arg value="-i"/>
            <arg value=".bak"/>
            <arg value="s/[[:digit:]]*\.[[:digit:]]*\.[[:digit:]]*/${DVAVersion}/"/>
            <arg value="linux${file.separator}debian${file.separator}control"/>
        </exec>
        <exec executable="powershell.exe" dir="${basedir}" osfamily="windows">
            <arg value="-command"/>
            <arg value="(gc 'linux${file.separator}debian${file.separator}control' -raw) -replace '\d*\.\d*\.\d*', '${DVAVersion}' | out-file 'linux${file.separator}debian${file.separator}control'"/>
        </exec>
        <exec executable="fakeroot" dir="${OutDir}">
            <arg value="dpkg"/>
            <arg value="--build"/>
            <arg value="debian"/>
        </exec>
        <move file="${OutDir}${file.separator}debian.deb" tofile="${OutDir}${file.separator}DVA5.deb"/>
    </target>

    <target name="AllSetups" description="Build all setups" depends="Clean,BuildMacDmg,BuildWinSetup,SignWinSetup,BuildLinuxDeb">
        <java jar="${AppBundleContents}/DVA.jar" fork="true">
            <arg value="/clearsettings"/>
        </java>
        <echo>Version ${DVAVersion}</echo>
        <copy todir="build/TestUpdateDrop/${DVAVersion}">
            <fileset dir="${OutDir}">
                <include name="${DmgName}.dmg.bz2"/>
                <include name="${WindowsSetupName}.exe"/>
                <include name="DVA5.deb"/>
                <include name="new.html"/>
            </fileset>
        </copy>
    </target>
    
    <target name="DevBuild" description="Fast dev build" depends="Clean,UpdateMacApp"/>

    <target name="TimetableFetch" description="Fetch/generate timetable" depends="CreateJar">
        <exec executable="/bin/bash" dir=".">
            <arg value="ttfetch.sh"/>
        </exec>
    </target>
</project>

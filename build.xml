<?xml version="1.0" ?>
<!-- Configuration of the Ant build system to generate a Jar file -->
<project name="DVA" default="CreateJar">
    <property environment="env"/>
    <exec executable="hostname" outputproperty="hostname" failonerror="true"/>
    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="jars/ant-contrib-1.0b3.jar"/>
        </classpath>
    </taskdef>

    <property name="ClassesDir" value="build/classes"/>
    <property name="OutDir" value="build${file.separator}Output"/>
    <property name="DistDir" value="build${file.separator}Output${file.separator}dist"/>
    <property name="ToolsDir" value="build${file.separator}Tools"/>
    <property name="JavaVersionMajor" value="17"/>
    <property name="JavaVersionPlus" value="17.0.14%2b7"/>
    <property name="JavaVersionUnderscore" value="17.0.14_7"/>
    <property name="JavaVersionMicrosoft" value="17.0.14"/>
    <property name="InnoSetupVersion" value="6.2.2"/>
    <propertyregex property="DVAVersion"
                   input="${env.BUILD_SOURCEBRANCHNAME}"
                   regexp="([\d\.]+)"
                   select="\1"
                   casesensitive="false"
                   defaultvalue="0.0.0" />
    <path id="jars">
        <fileset dir="jars">
            <include name="*" />
        </fileset>
    </path>
    <property name="BuildClasspath" value="${toString:jars}" />
    <property name="JlinkModules" value="java.desktop,java.naming,jdk.unsupported,java.management,java.net.http"/>
    <condition property="ExecutableExtension" value=".exe" else="">
        <os family="windows"/>
    </condition>
    <condition property="Jlink" value="${env.JAVA_HOME_17_X64}/bin/jlink${ExecutableExtension}" else="jlink${ExecutableExtension}">
        <available file="${env.JAVA_HOME_17_X64}/bin/jlink${ExecutableExtension}"/>
    </condition>
    <condition property="bzip2compression" value="fast" else="best">
        <isset property="fast"/>
    </condition>
    <condition property="innosetupcompression" value="zip/1" else="lzma2/ultra">
        <isset property="fast"/>
    </condition>
    <condition property="dpkgcompression" value="none" else="xz">
        <isset property="fast"/>
    </condition>

    <!-- Mac signing identity in Keychain -->
    <property name="SignIdentity" value="Developer ID Application: Jonathan Boles (W2WXX3D2U6)"/>

    <!-- Windows setup -->
    <property name="ResHackerDir"    value="${ToolsDir}${file.separator}resource_hacker"/>
    <property name="WinRun4JDir"     value="${ToolsDir}${file.separator}winrun4j${file.separator}bin${file.separator}"/>
    <property name="WinOutDir32"     value="${OutDir}${file.separator}win${file.separator}i386${file.separator}"/>
    <property name="WinOutDir64"     value="${OutDir}${file.separator}win${file.separator}amd64${file.separator}"/>
    <property name="InnoSetupCompiler" value="c:\Program Files (x86)\Inno Setup 6\ISCC.exe"/>
    <property name="DmgName" value="DVA5"/>
    <property name="WindowsSetupName" value="DVA5Setup"/>

    <!-- OS/arch conditions -->
    <condition property="isMac">
        <os family="mac" />
    </condition>
    <condition property="isWindows">
        <os family="windows" />
    </condition>
    <condition property="isLinux">
        <os family="unix" />
    </condition>

    <!-- Fetch build dependencies -->
    <target name="FetchDeps" depends="FetchDeps.Common,FetchDeps.Mac,FetchDeps.Windows"/>
    <target name="FetchDeps.Common">
        <mkdir dir="${ToolsDir}"/>
    </target>
    <target name="FetchDeps.Mac" if="isMac" depends="FetchDeps.Common">
        <!-- JRE: Mac -->
        <get src="https://github.com/adoptium/temurin${JavaVersionMajor}-binaries/releases/download/jdk-${JavaVersionPlus}/OpenJDK${JavaVersionMajor}U-jdk_x64_mac_hotspot_${JavaVersionUnderscore}.tar.gz" dest="${ToolsDir}" usetimestamp="true"/>
        <untar dest="${ToolsDir}\jdk\mac-x86_64" compression="gzip" overwrite="false">
            <fileset dir="${ToolsDir}">
                <include name="OpenJDK*-jdk_x64_mac_*.tar.gz"/>
            </fileset>
            <cutdirsmapper dirs="1"/>
        </untar>
        <get src="https://github.com/adoptium/temurin${JavaVersionMajor}-binaries/releases/download/jdk-${JavaVersionPlus}/OpenJDK${JavaVersionMajor}U-jdk_aarch64_mac_hotspot_${JavaVersionUnderscore}.tar.gz" dest="${ToolsDir}" usetimestamp="true"/>
        <untar dest="${ToolsDir}\jdk\mac-arm64" compression="gzip" overwrite="false">
            <fileset dir="${ToolsDir}">
                <include name="OpenJDK*-jdk_aarch64_mac_*.tar.gz"/>
            </fileset>
            <cutdirsmapper dirs="1"/>
        </untar>
        <antcall target="JlinkOptimizeJre">
            <param name="folder" value="mac-x86_64/Contents/Home"/>
        </antcall>
        <antcall target="JlinkOptimizeJre">
            <param name="folder" value="mac-arm64/Contents/Home"/>
        </antcall>
        <delete includeemptydirs="true" removeNotFollowedSymlinks="true">
            <fileset dir="${ToolsDir}\jre" includes="**/Contents/Home/legal/" followsymlinks="false"/>
            <fileset dir="${ToolsDir}\jre" includes="**/classes*.jsa"/>
        </delete>
        <!-- Protocol Buffers compiler -->
        <get src="https://github.com/protocolbuffers/protobuf/releases/download/v3.19.1/protoc-3.19.1-osx-x86_64.zip" dest="${ToolsDir}/protoc.zip" usetimestamp="true"/>
        <unzip src="${ToolsDir}/protoc.zip" dest="${ToolsDir}/protoc" overwrite="false"/>
        <chmod perm="u+x" file="${ToolsDir}/protoc/bin/protoc"/>
    </target>
    <target name="FetchDeps.Windows" if="isWindows" depends="FetchDeps.Common">
        <!-- Resource Hacker -->
        <get src="http://www.angusj.com/resourcehacker/resource_hacker.zip" dest="${ToolsDir}" usetimestamp="true"/>
        <unzip src="${ToolsDir}/resource_hacker.zip" dest="${ResHackerDir}" overwrite="false"/>
        <!-- WinRun4J -->
        <get src="https://sourceforge.net/projects/winrun4j/files/winrun4j/0.4.5/winrun4J-0.4.5.zip/download" dest="${ToolsDir}/winrun4j.zip" usetimestamp="true"/>
        <unzip src="${ToolsDir}/winrun4j.zip" dest="${ToolsDir}" overwrite="false"/>
        <!-- JRE: Win -->
        <get src="https://github.com/adoptium/temurin${JavaVersionMajor}-binaries/releases/download/jdk-${JavaVersionPlus}/OpenJDK${JavaVersionMajor}U-jdk_x64_windows_hotspot_${JavaVersionUnderscore}.zip" dest="${ToolsDir}" usetimestamp="true"/>
        <unzip dest="${ToolsDir}\jdk\win64" overwrite="false">
            <fileset dir="${ToolsDir}">
                <include name="OpenJDK*-jdk_x64_windows_*.zip"/>
            </fileset>
            <cutdirsmapper dirs="1"/>
        </unzip>
        <get src="https://github.com/adoptium/temurin${JavaVersionMajor}-binaries/releases/download/jdk-${JavaVersionPlus}/OpenJDK17U-jdk_x86-32_windows_hotspot_${JavaVersionUnderscore}.zip" dest="${ToolsDir}" usetimestamp="true"/>
        <unzip dest="${ToolsDir}\jdk\win32" overwrite="false">
            <fileset dir="${ToolsDir}">
                <include name="OpenJDK*-jdk_x86-32_windows_*.zip"/>
            </fileset>
            <cutdirsmapper dirs="1"/>
        </unzip>
        <get src="https://aka.ms/download-jdk/microsoft-jdk-{JavaVersionMicrosoft}-windows-aarch64.zip" dest="${ToolsDir}" usetimestamp="true" />
        <unzip dest="${ToolsDir}\jdk\winarm64" overwrite="false">
            <fileset dir="${ToolsDir}">
                <include name="microsoft-jdk-*-aarch64.zip"/>
            </fileset>
            <cutdirsmapper dirs="1"/>
        </unzip>
        <antcall target="JlinkOptimizeJre">
            <param name="folder" value="win64"/>
        </antcall>
        <antcall target="JlinkOptimizeJre">
            <param name="folder" value="win32"/>
        </antcall>
        <antcall target="JlinkOptimizeJre">
            <param name="folder" value="winarm64"/>
        </antcall>
        <delete includeemptydirs="true">
            <fileset dir="${ToolsDir}\jre" includes="**/legal/"/>
            <fileset dir="${ToolsDir}\jre" includes="**/classes*.jsa"/>
        </delete>
        <!-- download Inno Setup -->
        <get src="https://files.jrsoftware.org/is/6/innosetup-${InnoSetupVersion}.exe" dest="${ToolsDir}/is.exe" usetimestamp="true"/>
        <!-- install Inno Setup -->
        <exec executable="${ToolsDir}/is.exe" failonerror="true">
            <arg line="/silent"/>
        </exec>
        <!-- Protocol Buffers compiler -->
        <get src="https://github.com/protocolbuffers/protobuf/releases/download/v3.19.1/protoc-3.19.1-win64.zip" dest="${ToolsDir}/protoc.zip" usetimestamp="true"/>
        <unzip src="${ToolsDir}/protoc.zip" dest="${ToolsDir}/protoc" overwrite="false"/>
    </target>
    <target name="FetchDeps.Linux" if="isLinux" depends="FetchDeps.Common">
        <!-- JRE: Linux -->
        <get src="https://github.com/adoptium/temurin${JavaVersionMajor}-binaries/releases/download/jdk-${JavaVersionPlus}/OpenJDK${JavaVersionMajor}U-jdk_x64_linux_hotspot_${JavaVersionUnderscore}.tar.gz" dest="${ToolsDir}" usetimestamp="true"/>
        <untar dest="${ToolsDir}\jdk\linux-x86_64" compression="gzip" overwrite="false">
            <fileset dir="${ToolsDir}">
                <include name="OpenJDK*-jdk_x64_linux_*.tar.gz"/>
            </fileset>
            <cutdirsmapper dirs="1"/>
        </untar>
        <get src="https://github.com/adoptium/temurin${JavaVersionMajor}-binaries/releases/download/jdk-${JavaVersionPlus}/OpenJDK${JavaVersionMajor}U-jdk_aarch64_linux_hotspot_${JavaVersionUnderscore}.tar.gz" dest="${ToolsDir}" usetimestamp="true"/>
        <untar dest="${ToolsDir}\jdk\linux-arm64" compression="gzip" overwrite="false">
            <fileset dir="${ToolsDir}">
                <include name="OpenJDK*-jdk_aarch64_linux_*.tar.gz"/>
            </fileset>
            <cutdirsmapper dirs="1"/>
        </untar>
        <antcall target="JlinkOptimizeJre">
            <param name="folder" value="linux-x86_64"/>
        </antcall>
        <antcall target="JlinkOptimizeJre">
            <param name="folder" value="linux-arm64"/>
        </antcall>
        <delete includeemptydirs="true" removeNotFollowedSymlinks="true">
            <fileset dir="${ToolsDir}\jre" includes="**/legal/" followsymlinks="false"/>
            <fileset dir="${ToolsDir}\jre" includes="**/classes*.jsa"/>
        </delete>
        <!-- Protocol Buffers compiler -->
        <get src="https://github.com/protocolbuffers/protobuf/releases/download/v3.19.1/protoc-3.19.1-linux-x86_64.zip" dest="${ToolsDir}/protoc.zip" usetimestamp="true"/>
        <unzip src="${ToolsDir}/protoc.zip" dest="${ToolsDir}/protoc" overwrite="false"/>
        <chmod perm="u+x" file="${ToolsDir}/protoc/bin/protoc"/>
    </target>

    <target name="Clean" description="Clean output folder">
        <delete failonerror="false" dir="${OutDir}"/>
        <delete failonerror="false" dir="${ClassesDir}"/>
    </target>

    <target name="Compile.Protoc.Check" description="Compile protobuf code">
        <available file="PlasmaCommon/src/com/google/transit/realtime/GtfsRealtime1007Extension.java" property="GtfsProtocCompiled"/>
    </target>
    <target name="Compile.Protoc" depends="Compile.Protoc.Check" unless="GtfsProtocCompiled" description="Compile protobuf code">
        <exec executable="${ToolsDir}/protoc/bin/protoc${ExecutableExtension}" failonerror="true">
            <arg value="--java_out=PlasmaCommon/src" />
            <arg value="PlasmaCommon${file.separator}src${file.separator}jb${file.separator}plasma${file.separator}gtfs${file.separator}gtfs-realtime_1007_extension.proto" />
        </exec>
    </target>
    <target name="Compile" depends="Compile.Protoc" description="Compile java code">
        <mkdir dir="${ClassesDir}"/>
        <javac destdir="${ClassesDir}" classpath="${BuildClasspath}" excludes="jb/common/nativefilechooser/*" debug="on" verbose="off" includeantruntime="no">
            <src path="DVAApp/src"/>
            <src path="DVACommon/src"/>
            <src path="PlasmaCommon/src"/>
            <src path="Core/src"/>
            <compilerarg value="-Xlint:unchecked"/>
            <compilerarg value="-Xlint:deprecation"/>
        </javac>
    </target>

    <!-- After Eclipse compile task, prepare JAR file -->
    <target name="CreateJar" description="Create Jar file" depends="Compile">
        <echo>version: ${DVAVersion}</echo>
        <echo>build.number: ${env.BUILD_BUILDID}</echo>
        <echo file="DVAApp/resources/version.txt" append="false">version: ${DVAVersion}
build.number: ${env.BUILD_BUILDID}</echo>
        <manifestclasspath property="ManifestClasspath" jarfile="jars/dummy.jar">
            <classpath refid="jars" />
        </manifestclasspath>
        <jar jarfile="${OutDir}/DVA.jar" level="0">
            <manifest>
                <attribute name="Main-Class" value="jb.dvacommon.DVA"/>
                <attribute name="Class-Path" value="${ManifestClasspath}"/>
            </manifest>
            <fileset dir="${ClassesDir}">
                <include name="**"/>
            </fileset>
            <fileset dir="DVAApp/src">
                <patternset>
                    <include name="**/*.xml"/>
                    <include name="**/*.properties"/>
                    <include name="**/*.png"/>
                    <include name="**/*.svg"/>
                </patternset>
            </fileset>
            <fileset dir="Core/src">
                <patternset>
                    <include name="**/*.xml"/>
                    <include name="**/*.properties"/>
                </patternset>
            </fileset>
            <fileset dir="DVAApp/resources">
                <include name="**"/>
            </fileset>
        </jar>
        <copy todir="${OutDir}" preservelastmodified="true">
            <fileset dir="configs" includes="*" />
        </copy>
    </target>

    <target name="JlinkOptimizeJre">
        <echo>Calling ${Jlink} to optimize JRE into ${ToolsDir}/jre/${folder}</echo>
        <delete dir="${ToolsDir}/jre/${folder}"/>
        <exec executable="${Jlink}">
            <arg value="--module-path"/>
            <arg value="${ToolsDir}/jdk/${folder}/jmods"/>
            <arg value="--add-modules"/>
            <arg value="${JlinkModules}"/>
            <arg value="--no-header-files"/>
            <arg value="--no-man-pages"/>
            <arg value="--output"/>
            <arg value="${ToolsDir}/jre/${folder}"/>
        </exec>
    </target>

    <!-- Builds the Mac app bundle. Windows uses a stub .exe launcher so no need to update it. -->
    <target name="BuildMacApps" if="isMac" depends="CreateJar,SetupCommon">
        <antcall target="BuildMacApp">
            <param name="arch" value="x86_64"/>
            <param name="arch.java" value="x86_64"/>
        </antcall>
        <antcall target="BuildMacApp">
            <param name="arch" value="arm64"/>
            <param name="arch.java" value="aarch64"/>
        </antcall>
    </target>
    <target name="BuildMacApp" description="Update contents of the mac app" if="isMac">
        <!-- Params:
             ${arch}        - the arch identifier from uname -m (x86_64, arm64)
             ${arch.java}   - the arch identifier as it would be in Java (x86_64, aarch64)
        -->
        <echo>Building Mac .app for arch: ${arch}</echo>
        <property name="AppBundleContents" value="${OutDir}/${arch.java}/DVA.app/Contents/MacOS"/>
        <copy todir="${OutDir}/${arch.java}">
            <fileset dir="mac">
                <include name="DVA.app/**"/>
            </fileset>
        </copy>
        <exec executable="plutil" dir="${OutDir}/${arch.java}" failonerror="true">
            <arg line="-replace CFBundleGetInfoString -string ${DVAVersion} DVA.app/Contents/Info.plist"/>
        </exec>
        <exec executable="plutil" dir="${OutDir}/${arch.java}" failonerror="true">
            <arg line="-replace CFBundleShortVersionString -string ${DVAVersion} DVA.app/Contents/Info.plist"/>
        </exec>
        <exec executable="plutil" dir="${OutDir}/${arch.java}" failonerror="true">
            <arg line="-replace CFBundleVersion -string ${DVAVersion} DVA.app/Contents/Info.plist"/>
        </exec>
        <exec executable="plutil" dir="${OutDir}/${arch.java}" failonerror="true">
            <arg line="-replace NSHumanReadableCopyright -string &quot;Copyright © Jonathan Boles 1999-2022&quot; DVA.app/Contents/Info.plist"/>
        </exec>
        <copy todir="${AppBundleContents}" preservelastmodified="true">
            <fileset dir=".">
                <include name="log4j2.xml"/>
            </fileset>
            <fileset dir="${OutDir}">
                <include name="*.txt"/>
                <include name="DVA.jar"/>
            </fileset>
            <fileset dir="jars">
                <include name="*.jar"/>
            </fileset>
            <fileset dir="ffmpeg/mac-${arch}">
                <include name="*"/>
            </fileset>
        </copy>
        <copy todir="${AppBundleContents}/jre" preservelastmodified="true">
            <fileset dir="${ToolsDir}/jre/mac-${arch}/Contents/Home">
                <include name="**"/>
            </fileset>
        </copy>
        <chmod perm="u+x" file="${AppBundleContents}/dva"/>
        <chmod perm="u+x" file="${AppBundleContents}/ffmpeg"/>
        <chmod perm="u+x" file="${AppBundleContents}/jre/bin/java"/>
        <chmod perm="u+x" file="${AppBundleContents}/jre/lib/jspawnhelper"/>
    </target>

    <target name="SignMac.Check">
        <echo level="info">Running on ${hostname}</echo>
        <condition property="WillSignMac">
            <or>
                <equals arg1="${hostname}" arg2="jb"/>
                <equals arg1="${hostname}" arg2="jb.local"/>
                <equals arg1="${hostname}" arg2="jb.wavecable.com"/>
                <equals arg1="${hostname}" arg2="MacBook-Air.local"/>
                <equals arg1="${env.BUILD_DEFINITIONNAME}" arg2="Release Build"/>
            </or>
        </condition>
    </target>
    <target name="SignMacApps" description="Mac App Signing" depends="SignMac.Check,BuildMacApps" if="WillSignMac">
        <exec executable="codesign" dir="${OutDir}" failonerror="true">
            <arg line="-v --force --deep --options runtime --timestamp --entitlements ../../mac/entitlements.plist --sign '${SignIdentity}' x86_64/DVA.app"/>
            <arg line="-v --force --deep --options runtime --timestamp --entitlements ../../mac/entitlements.plist --sign '${SignIdentity}' aarch64/DVA.app"/>
        </exec>
        <!-- verify codesign -->
        <exec executable="codesign" dir="${OutDir}" failonerror="true">
            <arg line="-v --deep --verify x86_64/DVA.app"/>
            <arg line="-v --deep --verify aarch64/DVA.app"/>
        </exec>
    </target>

    <target name="ResHack">
        <!-- Params:
            file: the path of the Windows binary to ResHack.
            icon: the new icon to embed in the binary.
            ini: the WinRun4J .ini to embed in the binary. -->
        <echo level="info">Processing with ResourceHacker: ${file}</echo>
        <echo file="temp.rh">[FILENAMES]
Open=   ${file}
SaveAs= ${file}
Log=    console
[COMMANDS]
-delete ICONGROUP,,
-addoverwrite ${icon}, ICONGROUP,1,0
-addoverwrite ${ini}, 687,1,0
-addoverwrite ${stringtable}, STRINGTABLE,1,0
</echo>
        <exec executable="${ResHackerDir}\ResourceHacker.exe" failonerror="true">
            <arg line="-script temp.rh"/>
        </exec>
        <delete file="temp.rh"/>
    </target>
    <target name="BuildWinExes">
        <copy tofile="${OutDir}\win\i386\DVA.exe" file="${WinRun4JDir}WinRun4J.exe" overwrite="true"/>
        <copy tofile="${OutDir}\win\amd64\DVA.exe" file="${WinRun4JDir}WinRun4J64.exe" overwrite="true"/>
        <copy tofile="${OutDir}\win\i386\DVA.scr" file="${WinRun4JDir}WinRun4J.exe" overwrite="true"/>
        <copy tofile="${OutDir}\win\amd64\DVA.scr" file="${WinRun4JDir}WinRun4J64.exe" overwrite="true"/>

        <antcall target="ResHack">
            <param name="file" value="${OutDir}\win\i386\DVA.exe" />
            <param name="icon" value="win\dva.ico" />
            <param name="ini" value="win\DVA.ini" />
            <param name="stringtable" value="win\ScreenSaverStringTable.res"/>
        </antcall>
        <antcall target="ResHack">
            <param name="file" value="${OutDir}\win\amd64\DVA.exe" />
            <param name="icon" value="win\dva.ico" />
            <param name="ini" value="win\DVA.ini" />
            <param name="stringtable" value="win\ScreenSaverStringTable.res"/>
        </antcall>
        <antcall target="ResHack">
            <param name="file" value="${OutDir}\win\i386\DVA.scr" />
            <param name="icon" value="win\pse.ico" />
            <param name="ini" value="win\DVA.ini" />
            <param name="stringtable" value="win\ScreenSaverStringTable.res"/>
        </antcall>
        <antcall target="ResHack">
            <param name="file" value="${OutDir}\win\amd64\DVA.scr" />
            <param name="icon" value="win\pse.ico" />
            <param name="ini" value="win\DVA.ini" />
            <param name="stringtable" value="win\ScreenSaverStringTable.res"/>
        </antcall>
        <antcall target="SignWinFile">
            <param name="file" value="${OutDir}\win\i386\DVA.exe"/>
        </antcall>
        <antcall target="SignWinFile">
            <param name="file" value="${OutDir}\win\amd64\DVA.exe"/>
        </antcall>
        <antcall target="SignWinFile">
            <param name="file" value="${OutDir}\win\i386\DVA.scr"/>
        </antcall>
        <antcall target="SignWinFile">
            <param name="file" value="${OutDir}\win\amd64\DVA.scr"/>
        </antcall>
    </target>

    <target name="SetupCommon" description="common setup crap">
        <mkdir dir="${DistDir}"/>
        <copy file="DVAApp/resources/new.html" todir="${DistDir}"/>
    </target>

    <!-- Build Mac setup -->
    <target name="BuildMacDmgs" if="isMac" depends="SignMacApps">
        <antcall target="BuildMacDmg">
            <param name="arch.java" value="x86_64"/>
        </antcall>
        <antcall target="BuildMacDmg">
            <param name="arch.java" value="aarch64"/>
        </antcall>
        <move tofile="${DistDir}/${DmgName}.dmg.bz2" file="${DistDir}/${DmgName}-x86_64.dmg.bz2" overwrite="true"/>
        <copy tofile="${DistDir}/${DmgName}.dmg" file="${DistDir}/${DmgName}-x86_64.dmg" overwrite="true"/>
        <delete file="${DistDir}/${DmgName}-aarch64.dmg.bz2"/>
    </target>
    <target name="BuildMacDmg" description="Build Mac DMG" if="isMac">
        <!-- Params:
             ${arch.java}   - the arch identifier as it would be in Java (x86_64, aarch64)
        -->
        <echo>Building Mac DMG for arch: ${arch.java}</echo>
        <property name="DmgVolumeName" value="DVA 5"/>
        <property name="DmgMountPoint" value="/Volumes/${DmgVolumeName}"/>
        <delete file="${DistDir}/${DmgName}-${arch.java}.ro.dmg" failonerror="false"/>
        <delete file="${DistDir}/${DmgName}-${arch.java}.dmg" failonerror="false"/>
        <delete file="${DistDir}/${DmgName}-${arch.java}.dmg.bz2" failonerror="false"/>
        <exec executable="sh" outputproperty="dmgSizeMb">
            <arg line="-c &quot;echo $((`du -d 0 -m build/Output/${arch.java}/DVA.app | cut -f 1` + 5))&quot;"/>
        </exec>
        <echo>Creating .DMG with ${dmgSizeMb} mb</echo>
        <exec executable="hdiutil" dir="${DistDir}" failonerror="true">
            <arg line="create -megabytes ${dmgSizeMb} -volname &quot;${DmgVolumeName}&quot; -fs HFS+ ${DmgName}-${arch.java}.dmg"/>
        </exec>
        <exec executable="hdiutil" dir="${DistDir}" failonerror="true">
            <arg line="attach ${DmgName}-${arch.java}.dmg"/>
        </exec>
        <exec executable="sh" dir="${OutDir}/${arch.java}" failonerror="true">
            <arg value="-c"/>
            <arg value="cp -Rfp DVA.app '${DmgMountPoint}'"/>
        </exec>
        <exec executable="osascript" failonerror="true">
            <arg line="-e 'tell application &quot;Finder&quot; to make alias file to posix file &quot;/Applications&quot; at posix file &quot;${DmgMountPoint}&quot;'"/>
        </exec>
        <sleep seconds="2"/>
        <exec executable="hdiutil" failonerror="true">
            <arg line="detach '${DmgMountPoint}'"/>
        </exec>
        <echo level="info">Bzip2 compression: ${bzip2compression}</echo>
        <exec executable="bzip2" dir="${DistDir}" failonerror="true">
            <arg line="--verbose --${bzip2compression} --keep ${DmgName}-${arch.java}.dmg"/>
        </exec>
        <exec executable="hdiutil" dir="${DistDir}" failonerror="true">
            <arg line="convert ${DmgName}-${arch.java}.dmg -format UDBZ -o ${DmgName}-${arch.java}.ro.dmg"/>
        </exec>
        <move file="${DistDir}/${DmgName}-${arch.java}.ro.dmg" tofile="${DistDir}/${DmgName}-${arch.java}.dmg"/>
    </target>
    <target name="SignMacDmgs" description="Mac DMG Signing" depends="SignMac.Check,BuildMacDmgs" if="WillSignMac">
        <antcall target="SignMacDmg">
            <param name="arch.java" value="x86_64"/>
        </antcall>
        <antcall target="SignMacDmg">
            <param name="arch.java" value="aarch64"/>
        </antcall>

        <!-- still notarize the vanilla DMG for older versions to successfully update -->
        <echo>Signing Mac DMG (legacy)</echo>
        <exec executable="codesign" dir="${DistDir}" failonerror="true">
            <arg line="-v --force --timestamp --sign '${SignIdentity}' ${DmgName}.dmg"/>
        </exec>
        <!-- verify codesign -->
        <exec executable="codesign" dir="${DistDir}" failonerror="true">
            <arg line="-v --verify ${DmgName}.dmg"/>
        </exec>
        <!-- Notarize -->
        <exec executable="sh" failonerror="true">
            <arg line="./notarize.sh ${DistDir}/${DmgName}.dmg"/>
        </exec>
        <!-- verify gatekeeper -->
        <exec executable="spctl" dir="${DistDir}" failonerror="true">
            <arg line="-vv --assess --type open --context context:primary-signature ${DmgName}.dmg"/>
        </exec>
    </target>
    <target name="SignMacDmg">
        <!-- Params:
             ${arch.java}   - the arch identifier as it would be in Java (x86_64, aarch64)
        -->
        <echo>Signing Mac DMG for arch: ${arch.java}</echo>
        <exec executable="codesign" dir="${DistDir}" failonerror="true">
            <arg line="-v --force --timestamp --sign '${SignIdentity}' ${DmgName}-${arch.java}.dmg"/>
        </exec>
        <!-- verify codesign -->
        <exec executable="codesign" dir="${DistDir}" failonerror="true">
            <arg line="-v --verify ${DmgName}-${arch.java}.dmg"/>
        </exec>
        <!-- Notarize -->
        <exec executable="sh" failonerror="true">
            <arg line="./notarize.sh ${DistDir}/${DmgName}-${arch.java}.dmg"/>
        </exec>
        <!-- verify gatekeeper -->
        <exec executable="spctl" dir="${DistDir}" failonerror="true">
            <arg line="-vv --assess --type open --context context:primary-signature ${DmgName}-${arch.java}.dmg"/>
        </exec>
    </target>

    <!-- Build windows setup -->
    <target name="BuildWinSetup" description="Build Windows setup EXE" depends="CreateJar,SetupCommon,BuildWinExes">
        <echo level="info">Inno Setup compression: ${innosetupcompression}</echo>
        <property name="innosetupargs" value="/Qp /Dinnosetupcompression=${innosetupcompression} /Dversion=${DVAVersion} win\setup.iss"/>
        <exec executable="${InnoSetupCompiler}" failonerror="true">
            <arg line="${innosetupargs}"/>
        </exec>
    </target>

    <!-- Sign windows setup -->
    <target name="SignWin.Check">
        <condition property="WillSignWin">
            <or>
                <available file="/Users/jb/Software/JonathanBoles.p12"/>
                <available file="${env.AGENT_TEMPDIRECTORY}/JonathanBoles.p12"/>
            </or>
        </condition>
        <available file="/Users/jb/Software/JonathanBoles.p12" property="SignCert" value="/Users/jb/Software/JonathanBoles.p12"/>
        <available file="${env.AGENT_TEMPDIRECTORY}/JonathanBoles.p12" property="SignCert" value="${env.AGENT_TEMPDIRECTORY}\JonathanBoles.p12"/>
        <echo level="info">Signing cert: ${SignCert}</echo>
    </target>
    <target name="SignWinFile" depends="SignWin.Check" if="WillSignWin">
        <echo message="Signing: ${file}"/>
        <exec executable="C:\Program Files (x86)\Windows Kits\10\bin\10.0.19041.0\x86\signtool.exe" osfamily="windows" failonerror="true">
            <arg line="sign /f ${SignCert} /fd sha256 /tr http://timestamp.digicert.com /td SHA256 /d &quot;DVA&quot; ${file}"/>
        </exec>
    </target>
    <target name="SignWinSetup" depends="BuildWinSetup">
        <antcall target="SignWinFile">
            <param name="file" value="${OutDir}/dist/DVA5Setup.exe" />
        </antcall>
    </target>

    <!-- Linux Debian Setups -->
    <target name="BuildLinuxDebs" depends="CreateJar,SetupCommon">
        <antcall target="BuildLinuxDeb">
            <param name="arch" value="x86_64"/>
            <param name="arch.java" value="x86_64"/>
            <param name="arch.debian" value="amd64"/>
        </antcall>
        <antcall target="BuildLinuxDeb">
            <param name="arch" value="arm64"/>
            <param name="arch.java" value="aarch64"/>
            <param name="arch.debian" value="arm64"/>
        </antcall>
    </target>
    <target name="BuildLinuxDeb">
        <!-- Params:
             ${arch}        - the arch identifier from uname -m (x86_64, arm64)
             ${arch.java}   - the arch identifier as it would be in Java (x86_64, aarch64)
             ${arch.debian} - the corresponding Debian arch identifier (amd64, arm64)
        -->
        <echo>Building .DEB for arch: ${arch} (debian arch: ${arch.debian})</echo>
        <property name="DpkgRoot" value="${OutDir}/debian"/>
        <delete failonerror="false" dir="${DpkgRoot}"/>
        <copy todir="${DpkgRoot}/DEBIAN" preservelastmodified="true" file="linux/debian/control"/>
        <copy todir="${DpkgRoot}/usr/share/applications" preservelastmodified="true" file="linux/debian/dva.desktop"/>
        <copy todir="${DpkgRoot}/usr/bin" preservelastmodified="true" file="linux/dva"/>
        <copy todir="${DpkgRoot}/usr/share/dva" preservelastmodified="true" file="DVAApp/resources/dva_icon.png"/>
        <copy todir="${DpkgRoot}/usr/share/dva" preservelastmodified="true">
            <fileset dir="${OutDir}">
                <include name="*.txt"/>
                <include name="DVA.jar"/>
            </fileset>
            <fileset dir="jars">
                <include name="*.jar"/>
            </fileset>
            <fileset dir="ffmpeg/linux-${arch}">
                <include name="**"/>
            </fileset>
        </copy>
        <copy todir="${DpkgRoot}/usr/share/dva/jre" preservelastmodified="true">
            <fileset dir="${ToolsDir}/jre/linux-${arch}">
                <include name="**"/>
            </fileset>
        </copy>
        <chmod perm="+x" file="${DpkgRoot}/usr/bin/dva"/>
        <chmod perm="+x" file="${DpkgRoot}/usr/share/dva/ffmpeg"/>
        <chmod perm="+x" file="${DpkgRoot}/usr/share/dva/jre/bin/java"/>
        <chmod perm="+x" file="${DpkgRoot}/usr/share/dva/jre/lib/jspawnhelper"/>
        <exec executable="sh" outputproperty="debInstalledSize">
            <arg line="-c &quot;echo `du -d 0 -k build/Output/debian | cut -f 1`&quot;"/>
        </exec>
        <exec executable="sed" dir="${basedir}" osfamily="mac" failonerror="true">
            <arg value="-i"/>
            <arg value=".bak"/>
            <arg value="s/^Version:.*/Version: ${DVAVersion}/;s/^Installed\-Size:.*/Installed\-Size: ${debInstalledSize}/;s/^Architecture:.*/Architecture: ${arch.debian}/"/>
            <arg value="${DpkgRoot}/DEBIAN/control"/>
        </exec>
        <exec executable="sed" dir="${basedir}" osfamily="unix" failonerror="true">
            <arg value="-i.bak"/>
            <arg value="s/^Version:.*/Version: ${DVAVersion}/;s/^Installed\-Size:.*/Installed\-Size: ${debInstalledSize}/;s/^Architecture:.*/Architecture: ${arch.debian}/"/>
            <arg value="${DpkgRoot}/DEBIAN/control"/>
        </exec>
        <delete file="${DpkgRoot}/DEBIAN/control.bak"/>
        <exec executable="fakeroot" dir="${OutDir}" osfamily="mac" failonerror="true">
            <arg value="dpkg-deb"/>
            <arg value="-Z${dpkgcompression}"/>
            <arg value="--build"/>
            <arg value="debian"/>
        </exec>
        <exec executable="dpkg-deb" dir="${OutDir}" osfamily="unix" failonerror="true">
            <arg value="-Z${dpkgcompression}"/>
            <arg value="--build"/>
            <arg value="debian"/>
        </exec>
        <move file="${OutDir}/debian.deb" tofile="${DistDir}/DVA5-${arch.java}.deb"/>
    </target>

    <target name="Run" description="Fast dev build" depends="CreateJar,SetupCommon">
        <antcall target="BuildMacApp">
            <param name="arch" value="arm64"/>
            <param name="arch.java" value="aarch64"/>
        </antcall>
        <exec executable="build/Output/aarch64/DVA.app/Contents/MacOS/dva"/>
    </target>

    <target name="SoundJars">
        <foreach target="SoundJar" param="dir">
            <path>
                <dirset dir="sounds" includes="*"/>
            </path>
        </foreach>
    </target>
    <target name="SoundJar">
        <basename property="name" file="${dir}"/>
        <zip basedir="${dir}"
             destfile="build/soundjars/${name}.jar"
             compress="false">
        </zip>
    </target>
</project>